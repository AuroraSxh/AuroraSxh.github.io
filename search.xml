<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python_review</title>
    <url>/2020/07/28/python-review/</url>
    <content><![CDATA[<h1 id="python-复习"><a href="#python-复习" class="headerlink" title="python 复习"></a>python 复习</h1><h2 id="一-amp-二、python-基础"><a href="#一-amp-二、python-基础" class="headerlink" title="一&amp;二、python 基础"></a>一&amp;二、python 基础</h2><h3 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h3><h4 id="一）、变量"><a href="#一）、变量" class="headerlink" title="(一）、变量"></a>(一）、变量</h4><h5 id="1、变量名"><a href="#1、变量名" class="headerlink" title="1、变量名"></a>1、变量名</h5><p>变量名注意保留字与关键字</p>
<h5 id="2、变量"><a href="#2、变量" class="headerlink" title="2、变量"></a>2、变量</h5><p><strong>赋值后使用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">print(type(b))</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;float&apos;&gt;





3.14</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">'circle'</span></span><br><span class="line">print(type(c))</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;str&apos;&gt;





&apos;circle&apos;</code></pre><h5 id="3、变量的管理"><a href="#3、变量的管理" class="headerlink" title="3、变量的管理"></a>3、变量的管理</h5><p>动态类型<br>对每个对象记录其引用数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5.8</span></span><br><span class="line">print(<span class="string">'id(a):'</span>,id(a))</span><br><span class="line">b = <span class="number">5.8</span></span><br><span class="line">print(<span class="string">'id(b):'</span>,id(b))</span><br><span class="line">c = a </span><br><span class="line">print(<span class="string">'id(c):'</span>,id(c))</span><br></pre></td></tr></table></figure>

<pre><code>id(a): 2588407727536
id(b): 2588407728592
id(c): 2588407727536</code></pre><p>对小整数[-5,256]有特殊的id，即不用像浮点数一样新建对象</p>
<h4 id="（二）、运算"><a href="#（二）、运算" class="headerlink" title="（二）、运算"></a>（二）、运算</h4><h5 id="1、算术运算"><a href="#1、算术运算" class="headerlink" title="1、算术运算"></a>1、算术运算</h5><p>除法有两种运算符<br>注意$//$运算符向下取整</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'41/3='</span>,<span class="number">41</span>/<span class="number">3</span>)</span><br><span class="line">print(<span class="string">'41//3='</span>,<span class="number">41</span>//<span class="number">3</span>)</span><br><span class="line">print(<span class="string">'-6//4='</span>,<span class="number">-6</span>//<span class="number">4</span>)</span><br><span class="line">print(<span class="string">'-6/4='</span>,<span class="number">-6</span>/<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<pre><code>41/3= 13.666666666666666
41//3= 13
-6//4= -2
-6/4= -1.5
-8//-3= 2</code></pre><p>取余注意<br>a与d是整数，d非零，那么余数r满足，$a=q*d+r$,q为整数，且$0&lt;=|r|&lt;|d|$<br>即，7mod3为2</p>
<h5 id="2、位运算"><a href="#2、位运算" class="headerlink" title="2、位运算"></a>2、位运算</h5><p><strong>取反 ~<br>**与 &amp;</strong></p>
<p><strong>或 |</strong></p>
<p><strong>异或 ^</strong></p>
<p><strong>左移 &lt;&lt;</strong></p>
<p><strong>右移 &gt;&gt;</strong></p>
<h5 id="3、比较运算"><a href="#3、比较运算" class="headerlink" title="3、比较运算"></a>3、比较运算</h5><p>数值的大小按照值比大小<br>字符串的比较按照ASCII码值大小</p>
<h3 id="该章作业："><a href="#该章作业：" class="headerlink" title="该章作业："></a>该章作业：</h3><ol>
<li><p>编写程序，输入一个9位的长整数，将其分解为三个三位的基本整数并输出，其中个、十、百位为一个整数，千、万、十万位为一个整数，百万、千万、亿位为一个整数。例如123456789分解为123、456和789。</p>
</li>
<li><p>编写程序，从键盘输入一个4位正整数，输出该数的反序数。反序数即原数各位上的数字颠倒次序形成的另一个整数，例如1234的反序数是4321，2468的反序数是8642。</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">num = int(input())</span><br><span class="line">a = num // <span class="number">1000000</span></span><br><span class="line">b = (num // <span class="number">1000</span>) % <span class="number">1000</span></span><br><span class="line">c = num % <span class="number">1000</span></span><br><span class="line">print(a,b,c)</span><br></pre></td></tr></table></figure>

<pre><code> 173925482


173 925 482</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2</span></span><br><span class="line">num2 = int(input())</span><br><span class="line">a = num2 % <span class="number">10</span></span><br><span class="line">b = (num2 // <span class="number">10</span>) % <span class="number">10</span></span><br><span class="line">c = (num2 // <span class="number">100</span>) % <span class="number">10</span></span><br><span class="line">d = num2 // <span class="number">1000</span></span><br><span class="line">print(str(a) + str(b) + str(c) + str(d))</span><br></pre></td></tr></table></figure>

<pre><code> 1234


4321</code></pre><h2 id="三、序列"><a href="#三、序列" class="headerlink" title="三、序列"></a>三、序列</h2><p><strong>序列的索引从0开始</strong></p>
<p>正向：0 1 2 3 4 5 ……………… n-1</p>
<p>逆向：-n -(n-1) -(n-2) ……………… -2 -1</p>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><h4 id="值比较"><a href="#值比较" class="headerlink" title="值比较"></a>值比较</h4><p>只有<strong>类型互相兼容的</strong>值才可以进行比较</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>]] &lt; [<span class="number">1</span>,[<span class="number">1</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="string">'bd'</span>] &lt; [<span class="number">1</span>,<span class="string">'bc'</span>]</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>] &lt; [<span class="number">1</span>,<span class="string">'f'</span>]</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-47-631c4c622310&gt; in &lt;module&gt;
----&gt; 1 [1,2] &lt; [1,&apos;f&apos;]


TypeError: &apos;&lt;&apos; not supported between instances of &apos;int&apos; and &apos;str&apos;</code></pre><h4 id="对象身份的比较"><a href="#对象身份的比较" class="headerlink" title="对象身份的比较"></a>对象身份的比较</h4><p>比较对象的id<br>注意<strong>小整数以及含数字、字母、下划线的字符串</strong></p>
<h4 id="布尔逻辑运算"><a href="#布尔逻辑运算" class="headerlink" title="布尔逻辑运算"></a>布尔逻辑运算</h4><p><code>not,and,or</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ch = <span class="string">'k'</span></span><br><span class="line"><span class="string">'a'</span> &lt;= ch &lt;= <span class="string">'z'</span> <span class="keyword">or</span> <span class="string">'A'</span> &lt;= ch &lt;= <span class="string">'Z'</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre><h3 id="通用序列类型操作"><a href="#通用序列类型操作" class="headerlink" title="通用序列类型操作"></a>通用序列类型操作</h3><p>####<br>运算符</p>
<ol>
<li>成员判断<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x in s </span><br><span class="line">x not in s</span><br></pre></td></tr></table></figure></li>
<li>连接<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s + t</span><br></pre></td></tr></table></figure></li>
<li>重复<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s * n,n * s</span><br></pre></td></tr></table></figure></li>
<li>获取<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s[i]</span><br><span class="line">s[i:j]</span><br><span class="line">s[i:j:k]</span><br></pre></td></tr></table></figure>
<h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><code>sequence[start_index:end_index:steps]</code><br><code>sequence[::-1]</code>能够获得序列的逆序<br><code>sequence[::-n]</code>按照步长n获得序列的逆序</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aList = [<span class="string">'Mon.'</span>, <span class="string">'Tues.'</span>, <span class="string">'Wed.'</span>, <span class="string">'Thur.'</span>, <span class="string">'Fri.'</span>, <span class="string">'Sat.'</span>, <span class="string">'Sun.'</span>]</span><br><span class="line">print(aList[::<span class="number">-1</span>])</span><br><span class="line">print(aList[::<span class="number">-3</span>])</span><br><span class="line">print(aList[<span class="number">5</span>:<span class="number">1</span>:<span class="number">-2</span>])</span><br><span class="line">print(aList[<span class="number">1</span>::<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<pre><code>[&apos;Sun.&apos;, &apos;Sat.&apos;, &apos;Fri.&apos;, &apos;Thur.&apos;, &apos;Wed.&apos;, &apos;Tues.&apos;, &apos;Mon.&apos;]
[&apos;Sun.&apos;, &apos;Thur.&apos;, &apos;Mon.&apos;]
[&apos;Sat.&apos;, &apos;Thur.&apos;]
[&apos;Tues.&apos;, &apos;Thur.&apos;, &apos;Sat.&apos;]</code></pre><h4 id="序列类型内建函数"><a href="#序列类型内建函数" class="headerlink" title="序列类型内建函数"></a>序列类型内建函数</h4><p><strong>转换</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list(iter)</span><br><span class="line">tuple(iter)</span><br><span class="line">str(obj)</span><br></pre></td></tr></table></figure>
<p><strong>其他内建函数</strong></p>
<p><code>sorted()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nList = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">print(sorted(nList))</span><br><span class="line">print(nList)</span><br><span class="line">nList.sort()</span><br><span class="line">print(nList)</span><br></pre></td></tr></table></figure>

<pre><code>[1, 2, 3, 5]
[3, 2, 5, 1]
[1, 2, 3, 5]</code></pre><p><code>reversed()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nList = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line">print(reversed(nList))</span><br><span class="line">print(list(reversed(nList)))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;list_reverseiterator object at 0x000001ACF2C4B108&gt;
[1, 5, 2, 3]</code></pre><p><strong>reversed() enumerate() zip()返回的是迭代对象</strong></p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p><strong>字符串不可变！</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符串的转义</span></span><br><span class="line">gStr = <span class="string">r'd:\python\n.py'</span></span><br><span class="line">gStr</span><br></pre></td></tr></table></figure>




<pre><code>&apos;d:\\python\\n.py&apos;</code></pre><p>例子：有一些从网络上下载的类似如下形式的一些句子：What do you think of this saying “No pain, No gain”?<br>对于句子中双引号中的内容，首先判断其是否满足标题格式，不管满足与否最终都将其转换为标题格式输出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aStr = <span class="string">'What do you think of this saying "No pain, No gain"? '</span></span><br><span class="line">lindex = aStr.index(<span class="string">'\"'</span>,<span class="number">0</span>,len(aStr))</span><br><span class="line">rindex = aStr.rindex(<span class="string">'\"'</span>,<span class="number">0</span>,len(aStr))</span><br><span class="line">tempStr = aStr[lindex + <span class="number">1</span>:rindex]</span><br><span class="line"><span class="keyword">if</span> tempStr.istitle():</span><br><span class="line">    print(<span class="string">'It is title format.'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'It is not title format.'</span>)</span><br></pre></td></tr></table></figure>

<pre><code>It is not title format.</code></pre><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p><code>L.copy()</code>注意是<strong>浅拷贝</strong>！！！注意浅拷贝与深拷贝之间的区别！<br>浅拷贝复制了父对象（一级元素）不复制内部子对象<br>要进行深复制需要利用copy模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy </span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">5</span>,<span class="number">4</span>]]</span><br><span class="line">c = copy.deepcopy(a)</span><br></pre></td></tr></table></figure>

<h3 id="序列练习题"><a href="#序列练习题" class="headerlink" title="序列练习题"></a>序列练习题</h3><ol>
<li><p>给出一个字符串，字符串中可能包含大小写字母及标点符号。输出字母I（包括大小写）出现的次数。<br>测试数据：It may be rainin’, but there’s a rainbow above you.</p>
</li>
<li><p>将给定的字符串序列，按照字符ASCII码顺序从小到大排序后输出。<br>测试数据：adecbtk</p>
</li>
<li><p>有一份参加Python课程的学号名单B01,B02,B03,B05,B08,B10，请计算共有多少同学参与了本课程。请分别用列表和字符串的方法来解决这个问题。</p>
</li>
<li><p>输入一组单词，用逗号分隔各单词，统计其单词个数。</p>
</li>
<li><p>对于一个用三引号表示的字符串s，统计其行数。</p>
</li>
</ol>
<p>测试数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">'''line1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">line3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">line4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> '''</span></span><br></pre></td></tr></table></figure>

<p>行数为4</p>
<ol start="6">
<li>在一个给定的字符串中寻找最晚出现的某个输入子串的索引。</li>
</ol>
<p>给定的字符串：How many roads must a man walk down, before they call him a man.</p>
<p>若输入的测试查询字符串为man，则输出索引60。</p>
<ol start="7">
<li><p>输入一个文件名，判断它是不是文本文件，是输出True，否则输出False。</p>
</li>
<li><p>小张举办生日宴会，请帮助小张编写一段程序，输入所有出席宴会的好友的姓名（用空格分隔各姓名）包括Tom、Jerry、Pooh、Luffy并将姓名存到一个列表中，并在列表中插入两个标记字符串：’friends’作为列表的开始标记，’#’作为列表的结束标记。宴会结束后，小张想知道Pooh是第几个到达宴会的客人。</p>
</li>
<li><p>某学校组织了一场校园歌手比赛，每个歌手的得分由10名评委和观众决定，最终得分的规则是去掉10名评委所打分数的一个最高分和一个最低分，再加上所有观众评委分数后的平均值。评委打出的10个分数为：9、9、8.5、10、7、8、8、9、8和10，观众评委打出的综合评分为9，请计算该歌手的最终得分。</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">aStr = <span class="string">"It may be rainin', but there's a rainbow above you."</span></span><br><span class="line">aStr.lower().count(<span class="string">'i'</span>)</span><br></pre></td></tr></table></figure>




<pre><code>4</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2</span></span><br><span class="line">bStr = <span class="string">'adecbtk'</span></span><br><span class="line">sort_bStr = <span class="string">''</span>.join(sorted(bStr))</span><br><span class="line">sort_bStr</span><br></pre></td></tr></table></figure>




<pre><code>&apos;abcdekt&apos;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#3</span></span><br><span class="line">aLst = [<span class="string">'B01'</span>,<span class="string">'B02'</span>,<span class="string">'B03'</span>,<span class="string">'B05'</span>,<span class="string">'B08'</span>,<span class="string">'B10'</span>]</span><br><span class="line">len(aLst)</span><br><span class="line"></span><br><span class="line">tStr = <span class="string">'B01,B02,B03,B05,B08,B10'</span></span><br><span class="line">tStr.count(<span class="string">'B'</span>)</span><br></pre></td></tr></table></figure>




<pre><code>6</code></pre><h2 id="四、字典与集合"><a href="#四、字典与集合" class="headerlink" title="四、字典与集合"></a>四、字典与集合</h2><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><ol>
<li>直接创建<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aInfo = &#123;<span class="string">'mayue'</span>:<span class="number">3000</span>,<span class="string">'Lilin'</span>:<span class="number">4500</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li>dict函数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = [(<span class="string">'Mayue'</span>, <span class="number">3000</span>), (<span class="string">'Lilin'</span>, <span class="number">4500</span>), (<span class="string">'Wuyun'</span>, <span class="number">8000</span>)]</span><br><span class="line">bInfo = dict(info)</span><br><span class="line">print(bInfo)</span><br><span class="line">cInfo = dict([[<span class="string">'Mayue'</span>, <span class="number">3000</span>], [<span class="string">'Lilin'</span>, <span class="number">4500</span>], [<span class="string">'Wuyun'</span>, <span class="number">8000</span>]])</span><br><span class="line">dInfo = dict(Mayue = <span class="number">3000</span>, Lilin = <span class="number">4500</span>, Wuyun = <span class="number">8000</span>)</span><br><span class="line">eInfo = dict(((<span class="string">'Mayue'</span>, <span class="number">3000</span>), (<span class="string">'Lilin'</span>, <span class="number">4500</span>), (<span class="string">'Wuyun'</span>, <span class="number">8000</span>)))</span><br></pre></td></tr></table></figure></li>
<li>fromkeys(seq[,value])</li>
</ol>
<p>注意这里value是所有键的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ginfo  = &#123;&#125;.fromkeys((<span class="string">'mayue'</span>,<span class="string">'lilin'</span>),(<span class="number">3000</span>,<span class="number">4500</span>))</span><br><span class="line">ginfo</span><br></pre></td></tr></table></figure>

<p><code>d.get(key,default = None)</code>后的None可以自己设置，<code>d.get(key,&#39;No matched key(s)&#39;)</code></p>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>利用<code>{}</code>或者<code>set()</code>或者<code>frozenset()</code>创建；<br><code>set()</code>创建可变集合不可哈希；<br><code>frozenset()</code>创建不可变集合不可哈希。</p>
<h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">in</span></span><br><span class="line"><span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">==</span><br><span class="line">!=</span><br><span class="line">&lt; <span class="comment">#真子集 </span></span><br><span class="line">&lt;= <span class="comment">#子集 s.issubset()</span></span><br><span class="line">&gt; <span class="comment">#真包含</span></span><br><span class="line">&gt;= <span class="comment">#包含 s.issuperset()</span></span><br><span class="line">&amp; <span class="comment">#交集∩ s.intersection(s2)</span></span><br><span class="line">| <span class="comment">#并集∪ s.union(s1)</span></span><br><span class="line">- <span class="comment">#集合差运算 s.difference(s2)</span></span><br><span class="line">^ <span class="comment">#对称差分 s.symmetric_difference(s2)</span></span><br></pre></td></tr></table></figure>

<h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><ol start="3">
<li>歌唱比赛进行海选活动，歌手分为两组，按序号进行投票，第一组歌手的编号为1、2、3、4、5，第二组歌手的编号为6、7、8、9、10，投票编号为4、7、9、1、2、2、6、2、2、1、6、9、7、4、5、5、7、9、5、5、4，请对投票数据进行分析，完成以下问题：</li>
</ol>
<p>(1)求获得了选票的全部歌手的序号；</p>
<p>(2)求第一组获得选票的歌手；</p>
<p>(3)求第二组没有获得选票的歌手；</p>
<p>(4)为第二组增加一名歌手，序号为11；</p>
<p>(5)对任意给定的歌手编号，判断其是否获得投票。</p>
<ol start="4">
<li>对于几个公司的财经数据，如何构造公司代码和股票价格的字典？<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pList = [(<span class="string">'AXP'</span>, <span class="string">'American Express Company'</span>), </span><br><span class="line">(<span class="string">'BA'</span>, <span class="string">'The Boeing Company'</span>, <span class="string">'184.76'</span>),</span><br><span class="line">(<span class="string">'CAT'</span>, <span class="string">'Caterpillar Inc.'</span>, <span class="string">'96.39'</span>),</span><br><span class="line">(<span class="string">'CSCO'</span>, <span class="string">'Cisco Systems,Inc.'</span><span class="string">'33.71'</span>), </span><br><span class="line">(<span class="string">'CVX'</span>, <span class="string">'Chevron Corporation'</span>, <span class="string">'106.09'</span>)]</span><br></pre></td></tr></table></figure>


</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;</span><br><span class="line">t = &#123;<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>&#125;</span><br><span class="line">set(t)</span><br><span class="line">s1&amp;t</span><br><span class="line">s2 - t</span><br><span class="line">n = int(input())</span><br><span class="line">n <span class="keyword">in</span> t</span><br></pre></td></tr></table></figure>

<pre><code> 2





True</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#4</span></span><br><span class="line">pList = [(<span class="string">'AXP'</span>, <span class="string">'American Express Company'</span>,<span class="string">'78.51'</span>), </span><br><span class="line">(<span class="string">'BA'</span>, <span class="string">'The Boeing Company'</span>, <span class="string">'184.76'</span>),</span><br><span class="line">(<span class="string">'CAT'</span>, <span class="string">'Caterpillar Inc.'</span>, <span class="string">'96.39'</span>),</span><br><span class="line">(<span class="string">'CSCO'</span>, <span class="string">'Cisco Systems,Inc.'</span>,<span class="string">'33.71'</span>), </span><br><span class="line">(<span class="string">'CVX'</span>, <span class="string">'Chevron Corporation'</span>, <span class="string">'106.09'</span>)]</span><br><span class="line">adict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> items <span class="keyword">in</span> pList:</span><br><span class="line">    adict[items[<span class="number">0</span>]] = items[<span class="number">2</span>]</span><br><span class="line">print(adict)</span><br></pre></td></tr></table></figure>

<pre><code>{&apos;AXP&apos;: &apos;78.51&apos;, &apos;BA&apos;: &apos;184.76&apos;, &apos;CAT&apos;: &apos;96.39&apos;, &apos;CSCO&apos;: &apos;33.71&apos;, &apos;CVX&apos;: &apos;106.09&apos;}</code></pre><h2 id="程序控制结构"><a href="#程序控制结构" class="headerlink" title="程序控制结构"></a>程序控制结构</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><p><strong><code>eval()</code>的用法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#输入任务</span></span><br><span class="line">a,b = input().split(<span class="string">','</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<pre><code> 1,2


1
2


 1,2</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#输入任务2</span></span><br><span class="line">a,b = eval(input())</span><br><span class="line">print(a,b)</span><br></pre></td></tr></table></figure>

<pre><code> 1,2


1 2</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#输入任务3</span></span><br><span class="line"><span class="comment">#输入列表（数字）</span></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">b = list(map(int,input().split(<span class="string">','</span>)))<span class="comment">#input 1,2,3</span></span><br><span class="line">b</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">a = eval(input())<span class="comment">#input [1,2,3]</span></span><br></pre></td></tr></table></figure>

<pre><code> 1,2,3





[1, 2, 3]</code></pre><h6 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h6><p><code>print(subject,sep = &#39;&#39;,end = &#39;&#39;)</code></p>
<p>格式化输出</p>
<h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><p><code>if...else...</code></p>
<p><strong>三元运算符</strong></p>
<p><code>t = x if x &gt;= y else y</code></p>
<p>与</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x &gt;= y:</span><br><span class="line">    t = x</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    t = y</span><br></pre></td></tr></table></figure>
<p>等价</p>
<p><code>elif</code></p>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#辗转相除法求最大公约数</span></span><br><span class="line">x,y =  eval(input())</span><br><span class="line"><span class="keyword">if</span> x &lt; y:</span><br><span class="line">    x,y = y,x</span><br><span class="line"><span class="keyword">while</span> x % y != <span class="number">0</span>:</span><br><span class="line">    r = x % y</span><br><span class="line">    x = y</span><br><span class="line">    y = r</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure>

<pre><code> 18,9


9</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算圆周率</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">s = <span class="number">0</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">sgn = <span class="number">1</span></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> math.fabs(x) &gt;= <span class="number">1e-8</span>:</span><br><span class="line">    s += x</span><br><span class="line">    sgn *= <span class="number">-1</span></span><br><span class="line">    k += <span class="number">2</span></span><br><span class="line">    x = sgn / k</span><br><span class="line">print(<span class="number">4</span> * s)</span><br></pre></td></tr></table></figure>

<pre><code>3.1415926335902506</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = int(input())</span><br><span class="line">re_num = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> num &lt; <span class="number">10</span>:</span><br><span class="line">    re_num = num</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">while</span> num != <span class="number">0</span>:</span><br><span class="line">        re_num = <span class="number">10</span> * re_num + num % <span class="number">10</span></span><br><span class="line">        num = num // <span class="number">10</span></span><br><span class="line">print(re_num)</span><br></pre></td></tr></table></figure>

<pre><code> 1234


4321</code></pre><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><ol>
<li>序列项迭代</li>
<li>序列索引迭代</li>
<li>迭代器迭代<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">courses = [<span class="string">'maths'</span>,<span class="string">'english'</span>,<span class="string">'python'</span>]</span><br><span class="line">scores = [<span class="string">'100'</span>,<span class="string">'100'</span>,<span class="string">'100'</span>]</span><br><span class="line"><span class="keyword">for</span> c,s <span class="keyword">in</span> zip(courses,scores):</span><br><span class="line">        print(<span class="string">'&#123;0&#125;-&#123;1:d&#125;'</span>.format(c,s))</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>迭代器与可迭代对象</strong></p>
<p><strong>嵌套循环</strong></p>
<p><strong>计算素数</strong></p>
<p><strong>break终止循环，运行循环之后的语句</strong></p>
<p><strong>continue跳过循环体内continue后面的语句，开始新的循环</strong></p>
<p><strong>循环中的else子句，若代码从break处终止，跳出循环；若正常结束循环，则执行else中代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#斐波那契</span></span><br><span class="line">n = int(input())</span><br><span class="line">a,b = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    a,b = b,a + b</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">19</span>:</span><br><span class="line">        print(a)</span><br></pre></td></tr></table></figure>

<pre><code> 20


6765</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">1200</span></span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> num != <span class="number">0</span>:</span><br><span class="line">    print(num % <span class="number">10</span>)</span><br><span class="line">    s = s + str(num % <span class="number">10</span>) </span><br><span class="line">    num = num // <span class="number">10</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>

<pre><code>0
0
2
1
0021</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="标准库函数"><a href="#标准库函数" class="headerlink" title="标准库函数"></a>标准库函数</h3><h4 id="os"><a href="#os" class="headerlink" title="os"></a>os</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(<span class="string">'path'</span>)<span class="comment">#改变路径</span></span><br><span class="line">os.listdir(path)<span class="comment">#列出文件列表</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.listdir(os.getcwd())</span><br></pre></td></tr></table></figure>




<pre><code>[&apos;.ipynb_checkpoints&apos;,
 &apos;20200506&apos;,
 &apos;DJI.csv&apos;,
 &apos;John V. Guttag - Introduction to Computation and Programming Using Python_ With Application to Understanding Data-The MIT Press (2016).pdf&apos;,
 &apos;Martin Jones - Advanced Python for Biologists (20-checkpoint.pdf&apos;,
 &apos;Martin Jones - Advanced Python for Biologists (20.pdf&apos;,
 &apos;pi.txt&apos;,
 &apos;program&apos;,
 &apos;python_project&apos;,
 &apos;python_review.ipynb&apos;,
 &apos;python大作业 191850122刘哲_171840518 宋霄涵_.zip&apos;,
 &apos;Python学习手册_第3版.pdf&apos;,
 &apos;python核心笔记.pdf&apos;,
 &apos;作业答案&apos;,
 &apos;程序-checkpoint.ipynb&apos;,
 &apos;程序.ipynb&apos;,
 &apos;课件&apos;,
 &apos;课本&apos;]</code></pre><h4 id="random"><a href="#random" class="headerlink" title="random"></a>random</h4><p>注意程序中的随机数是伪随机数，在Python中<font color="red">只要种子确定，每次随机结果都是一样的</font>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.choice(序列)<span class="comment">#从序列中获取随机值</span></span><br><span class="line">random.randint(<span class="number">1</span>,<span class="number">100</span>)<span class="comment">#从1到100间生成随机整数</span></span><br><span class="line">random.uniform(<span class="number">5</span>,<span class="number">10</span>)<span class="comment">#生成一个随机浮点数</span></span><br><span class="line">random.shuffle(序列)<span class="comment">#打乱列表中的元素</span></span><br><span class="line">random.sample(range(<span class="number">100</span>),<span class="number">10</span>)<span class="comment">#在序列range(100)中随机获取不同的10个值</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">method = [<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'UPDATE'</span>, <span class="string">'DELETE'</span>]</span><br><span class="line">URI1 = <span class="string">'service'</span></span><br><span class="line">URI2 = <span class="string">'controller'</span></span><br><span class="line">URI3 = <span class="string">'action'</span></span><br><span class="line"><span class="comment">#['xx:xx.xxx GET /service2/controller22/action223\n</span></span><br><span class="line">alst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    alst.append(<span class="string">'xx:xx.xxx '</span> + random.choice(method) + <span class="string">' /'</span> + URI1 + str(random.randrange(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) + <span class="string">'/'</span> +\</span><br><span class="line">    URI2 + <span class="string">''</span>.join([str(ch) <span class="keyword">for</span> ch <span class="keyword">in</span> random.sample(range(<span class="number">1</span>,<span class="number">4</span>),<span class="number">2</span>)]) + <span class="string">'/'</span> +\</span><br><span class="line">    URI3 + <span class="string">''</span>.join([str(ch) <span class="keyword">for</span> ch <span class="keyword">in</span> random.sample([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>],<span class="number">3</span>)]) + <span class="string">'\n'</span>)</span><br><span class="line">print(alst)</span><br></pre></td></tr></table></figure>

<pre><code>[&apos;xx:xx.xxx DELETE /service1/controller13/action123\n&apos;, &apos;xx:xx.xxx UPDATE /service1/controller32/action123\n&apos;, &apos;xx:xx.xxx POST /service1/controller31/action331\n&apos;, &apos;xx:xx.xxx POST /service1/controller23/action312\n&apos;, &apos;xx:xx.xxx UPDATE /service1/controller31/action233\n&apos;, &apos;xx:xx.xxx GET /service1/controller12/action113\n&apos;, &apos;xx:xx.xxx DELETE /service1/controller23/action123\n&apos;, &apos;xx:xx.xxx UPDATE /service1/controller23/action311\n&apos;, &apos;xx:xx.xxx UPDATE /service1/controller13/action223\n&apos;, &apos;xx:xx.xxx POST /service1/controller32/action311\n&apos;]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#利用Python中的random模块生成1000个0到100之间（包含0和100）的随机整数，并统计每个元素的 出现次数。</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">0</span>)<span class="comment">#对比有无该语句，有则结果不变</span></span><br><span class="line">x = [random.randint(<span class="number">0</span>,<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11</span>):</span><br><span class="line">    print(i, x.count(i))</span><br></pre></td></tr></table></figure>

<pre><code>0 5
1 13
2 7
3 9
4 11
5 9
6 6
7 10
8 13
9 11
10 6</code></pre><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><h5 id="嵌套调用"><a href="#嵌套调用" class="headerlink" title="嵌套调用"></a>嵌套调用</h5><h5 id="嵌套定义"><a href="#嵌套定义" class="headerlink" title="嵌套定义"></a>嵌套定义</h5><p><strong>Python中的函数是存在可见空间的，独立定义的函数，可以被任意函数引用，在函数内部定义的函数，只有这个函数可以引用，其他的函数是不可以引用的。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'1'</span>)</span><br><span class="line">    print(<span class="string">'2'</span>)</span><br><span class="line">    f2()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">print(f1())</span><br><span class="line">f2()</span><br></pre></td></tr></table></figure>

<pre><code>2
1
None



---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-3-77b6f71a860d&gt; in &lt;module&gt;
      5     f2()
      6 print(f1())
----&gt; 7 f2()


NameError: name &apos;f2&apos; is not defined</code></pre><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><h5 id="默认参数-1"><a href="#默认参数-1" class="headerlink" title="默认参数"></a>默认参数</h5><h5 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h5><h5 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a><strong>可变长参数</strong></h5><p>可变长位置参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*parameter)</span></span></span><br></pre></td></tr></table></figure>
<p>允许传入多个其他位置参数，以<font color="red"><strong>元组</strong></font>形式输入函数,也可将需要输入的参数打包成<font color="red">元组</font>再输入，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = (<span class="string">'abc'</span>,<span class="string">'def'</span>,<span class="string">'ghi'</span>)</span><br><span class="line">func(*test)</span><br><span class="line">func((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p>可变长关键字参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(**parameter)</span></span></span><br></pre></td></tr></table></figure>
<p>允许传入多个其他关键字参数，以<font color="red"><strong>字典</strong></font>形式输入函数,也可将需要输入的参数打包成<font color="red">字典</font>再输入，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic_t = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">func2(**dic_t)</span><br></pre></td></tr></table></figure>

<h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><p><strong>慎重使用全局变量</strong></p>
<p><strong>局部变量和全局变量同名时屏蔽全局变量</strong></p>
<h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><p>我调用我自己</p>
<h4 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">map()</span><br><span class="line">filter()</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">reduce()<span class="comment">#递归计算</span></span><br></pre></td></tr></table></figure>
<p>注意以上函数与lambda函数的合用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#map()函数接收一个函数和一个列表作为参数，把函数逐一映射/作用（map)到列表的每个元素上得到结果</span></span><br><span class="line">lst = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">1</span>]</span><br><span class="line">print(<span class="string">'1:'</span>,list(map(<span class="keyword">lambda</span> x:x ** <span class="number">2</span>,lst)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#filter()筛选列表中符合条件的元素</span></span><br><span class="line">lst2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]</span><br><span class="line">print(<span class="string">'2:'</span>,list(filter(<span class="keyword">lambda</span> x:x % <span class="number">2</span> == <span class="number">0</span>,lst2)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#reduce()函数可递归计算</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">lst3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">reduce(<span class="keyword">lambda</span> x,y:x + y,lst3)</span><br></pre></td></tr></table></figure>

<pre><code>1: [9, 4, 25, 64, 1]
2: [4, 6, 8, 10]





15</code></pre><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>文件读取</p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="center">功能</th>
<th align="center">使用说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">‘r’</td>
<td align="center">读模式打开文件</td>
<td align="center">文件必须存在</td>
</tr>
<tr>
<td align="center">‘w’</td>
<td align="center">写模式打开文件</td>
<td align="center">若文件不存在，则新建文件；若文件存在，则清空文件内容</td>
</tr>
<tr>
<td align="center">‘x’</td>
<td align="center">创建文件并以写模式打开</td>
<td align="center">若文件已经存在则失败</td>
</tr>
<tr>
<td align="center">‘a’</td>
<td align="center">追加模式打开文件</td>
<td align="center">若文件存在，则向文件尾追加内容；若不存在则新建文件</td>
</tr>
<tr>
<td align="center">‘b’</td>
<td align="center">二进制模式</td>
<td align="center">可添加到其他模式使用</td>
</tr>
<tr>
<td align="center">‘t’</td>
<td align="center">文本模式</td>
<td align="center">可添加到其他模式使用</td>
</tr>
<tr>
<td align="center">‘+’</td>
<td align="center">读/写模式</td>
<td align="center">可添加到其他模式使用</td>
</tr>
</tbody></table>
<p>打开文件可用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'filename'</span>,<span class="string">'mode'</span>,encoding = <span class="string">''</span>) <span class="keyword">as</span> file:</span><br><span class="line"><span class="comment">#for example</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'random.txt'</span>,<span class="string">'w+'</span>,encoding = <span class="string">'utf-8'</span>) ad fp:</span><br></pre></td></tr></table></figure>
<p>可以用with语句同时读入多个文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'subtitles.srt'</span>,<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp1, </span><br><span class="line">open(<span class="string">'content.txt'</span>,<span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp2:</span><br></pre></td></tr></table></figure>
<p>注意<font color="red"><code>f.seek()</code></font>的用法！！！</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>类——<font color="red">类描述对象的特征</font>（数据 + 操作）</p>
<p><strong>重要特征</strong>——<font color="red">继承</font></p>
<p>类的属性——数据；类的函数（方法）——操作部分</p>
<h3 id="类的定义与方法"><a href="#类的定义与方法" class="headerlink" title="类的定义与方法"></a>类的定义与方法</h3><p><strong>类实例化的写法</strong>：变量 = 类名(&lt;参数&gt;)</p>
<p>类的方法里第一个参数必须是<code>self</code>，指向<strong>实例本身</strong></p>
<p>python自动将<font color="red">对象作为第一个参数传入方法</font>中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"define DOog Class"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setName</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name<span class="comment">#self.name中name被隐藏，数据隐藏机制！和后面的name没关系</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(self)</span>:</span> </span><br><span class="line">        print(<span class="string">'Hi'</span>,self.name)</span><br><span class="line"><span class="comment">#self相当于实例名字，由实例直接传递参数给self</span></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">'__main__'</span>:</span><br><span class="line">    dog = Dog()</span><br><span class="line">    dog.setName(<span class="string">"paul"</span>)<span class="comment">#dog参数传递给self，paul传递给name</span></span><br><span class="line">    print(dog.name)<span class="comment">#dog.name是实例属性不是类属性</span></span><br><span class="line">    print(dog.greet())</span><br></pre></td></tr></table></figure>

<pre><code>paul
Hi paul
None</code></pre><h3 id="init-方法"><a href="#init-方法" class="headerlink" title="__init__方法"></a><code>__init__</code>方法</h3><p>类似于步骤器，创建对象时自动调用<code>__init__()</code>，把跟类有关的放进去，实例对象本身会被作为参数self传递</p>
<h3 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h3><p><font color="red"><strong>注意区分！</strong></font></p>
<p>实例属性可在实例创建后进行创建</p>
<p>类属性与实例无关，修改类属性需要<strong>使用类名</strong> </p>
<h3 id="继承与重写"><a href="#继承与重写" class="headerlink" title="继承与重写"></a>继承与重写</h3><p> 子类重写后如果要调用父类方法需要调用父类，传递具体实例。</p>
<p>子类重写的三种方法：</p>
<p>父类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">       <span class="string">"define Dog Class"</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">           self.name = name</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<ol>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarkingDog</span><span class="params">(Dog)</span>:</span></span><br><span class="line">       <span class="string">"define subclass BarkingDog"</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">           self.name = <span class="string">'Litte'</span> + name</span><br></pre></td></tr></table></figure></li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarkingDog</span><span class="params">(Dog)</span>:</span></span><br><span class="line">       <span class="string">"define subclass BarkingDog"</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">           self.name = name</span><br><span class="line">           print(<span class="string">"My name is"</span>,self.name)</span><br></pre></td></tr></table></figure></li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarkingDog</span><span class="params">(Dog)</span>:</span></span><br><span class="line">       <span class="string">"define subclass BarkingDog"</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">           super().__init__(name)<span class="comment">#不需要写self!#或者用Dog.__init__(self,name),这个就需要写self</span></span><br><span class="line">           print(<span class="string">"My name is"</span>,self.name)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">except</span> (error):</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>一个except块捕捉多个异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">except</span> (error1,error2,...):</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>空except语句——捕捉所有异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>as子句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    ...</span><br><span class="line">    print(err)<span class="comment">#检测所有exception下的异常并输出相应的异常</span></span><br></pre></td></tr></table></figure>
<p>else子句，<strong>程序正常时执行else</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>加入循环</p>
<p>输入错误后不退出持续输入直到输入正确</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">#break也可以放在这里</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span><span class="comment">#程序正常即执行break</span></span><br></pre></td></tr></table></figure>
<p>break也可以放在except后，视具体情况而定</p>
<p>finally子句无论什么时候都会被执行 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#判断是否是数字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isfloat</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">-1</span>] == <span class="string">'.'</span>:</span><br><span class="line">        s = s.strip(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        float(s)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'False'</span><span class="comment">#注意这个小地方 </span></span><br><span class="line">    <span class="keyword">return</span> float(s)</span><br></pre></td></tr></table></figure>

<p>raise语句用于自己引发异常，如<code>raise ValueError</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">raise</span> ZeroDivisionError(<span class="string">'分母是零啊亲'</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ZeroDivisionError                         Traceback (most recent call last)

&lt;ipython-input-1-1f0f5b9e31dc&gt; in &lt;module&gt;
----&gt; 1 raise ZeroDivisionError(&apos;分母是零啊亲&apos;)


ZeroDivisionError: 分母是零啊亲</code></pre><h2 id="科学计算与数据处理-Scipy"><a href="#科学计算与数据处理-Scipy" class="headerlink" title="科学计算与数据处理(Scipy)"></a>科学计算与数据处理(Scipy)</h2><h3 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h3><h4 id="矩阵的基本参数及运算"><a href="#矩阵的基本参数及运算" class="headerlink" title="矩阵的基本参数及运算"></a>矩阵的基本参数及运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.mean()</span><br><span class="line">np.sum()</span><br></pre></td></tr></table></figure>
<p>带arg的都返回index</p>
<h4 id="生成均匀分布、正态分布等矩阵"><a href="#生成均匀分布、正态分布等矩阵" class="headerlink" title="生成均匀分布、正态分布等矩阵"></a>生成均匀分布、正态分布等矩阵</h4><h4 id="切片-1"><a href="#切片-1" class="headerlink" title="切片"></a>切片</h4><h5 id="布尔切片"><a href="#布尔切片" class="headerlink" title="布尔切片"></a>布尔切片</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A[(A % <span class="number">2</span> == <span class="number">0</span>) &amp; (A &gt;= <span class="number">50</span>)]<span class="comment">#不支持and用&amp;</span></span><br></pre></td></tr></table></figure>
<p><strong>直接修改了原数组</strong>，用<code>np.where(&#39;布尔表达&#39;,&#39;目标值&#39;,A)</code>返回一个临时数组，相当于矢量化的三元运算<code>0 if A &gt;= 50 else -1</code></p>
<p><code>reshape</code>不会更改原始矩阵，<code>resize</code>直接更改矩阵本身</p>
<p><code>reshape(4,-1)</code>计算好了的矩阵可以直接写-1减少麻烦</p>
<p><code>reshape(-1)</code>直接变成一行</p>
<p>数组展平<br><code>ravel</code> &amp; <code>flatten</code> 一个是copy一个是view</p>
<p>数组分割与合并注意水平方向和垂直方向,h-axis = 1,v-axis = 0</p>
<p>利用好<font color="red">数组的矢量！！！可以省去写循环的麻烦</font></p>
<p><code>scores.mean(axis = 1,keepdims = True)</code>注意参数<code>keepdeims</code></p>
<p>注意数组的<font color="red"><strong>广播功能</strong></font>和<font color="red"><strong>矢量性质</strong></font></p>
<p>np.take()取出的index是按照展平以后的index</p>
<p><strong>0-1规范化</strong>： $\frac{x-min}{max-min}$</p>
<p><code>np.bincount()</code>计算各个数字出现的次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">collections.Counter(data)<span class="comment">#计数</span></span><br></pre></td></tr></table></figure>

<h4 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.savetxt(<span class="string">'a.txt'</span>,x,fmt = <span class="string">'%d'</span>)<span class="comment">#文件名，数组，格式化</span></span><br><span class="line">np.loadtxt(<span class="string">'a.txt'</span>)<span class="comment">#加载txt文件</span></span><br><span class="line">np.loadtxt(<span class="string">'DJI.csv'</span>,delimiter = <span class="string">','</span>,usecols = (<span class="number">3</span>,<span class="number">4</span>),unpack = <span class="literal">True</span>,skiprow = <span class="number">1</span>)<span class="comment">#文件名，分隔符，选择读取哪几列，解包（默认不解包），跳过表头（默认不跳过设置为0）</span></span><br></pre></td></tr></table></figure>
<p>缺失值填充与检测</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">s = StringIO(<span class="string">"1,2,3,4,5\n6,,,7,8\n,,9,10,11\n"</span>)</span><br><span class="line">data = np.genfromtxt(s,delimiter = <span class="string">','</span>,dtype = int,filling_values = <span class="number">-999</span>)</span><br><span class="line">loc_x,loc_y = np.where(data == <span class="number">-999</span>)</span><br><span class="line">print(list(zip(loc_x,loc_y)))</span><br></pre></td></tr></table></figure>

<pre><code>[(1, 1), (1, 2), (2, 0), (2, 1)]</code></pre><h5 id="将标量函数转换为ufunc函数（可处理向量化数据）"><a href="#将标量函数转换为ufunc函数（可处理向量化数据）" class="headerlink" title="将标量函数转换为ufunc函数（可处理向量化数据）"></a>将标量函数转换为ufunc函数（可处理向量化数据）</h5><p><code>np.frompyfunc(func,nin,nout)</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(str(x)[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">double_array = np.frompyfunc(f,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">print(double_array(np.arange(<span class="number">1</span>,<span class="number">100</span>)))</span><br></pre></td></tr></table></figure>

<pre><code>[1 2 3 4 5 6 7 8 9 1 11 21 31 41 51 61 71 81 91 2 12 22 32 42 52 62 72 82
 92 3 13 23 33 43 53 63 73 83 93 4 14 24 34 44 54 64 74 84 94 5 15 25 35
 45 55 65 75 85 95 6 16 26 36 46 56 66 76 86 96 7 17 27 37 47 57 67 77 87
 97 8 18 28 38 48 58 68 78 88 98 9 19 29 39 49 59 69 79 89 99]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line">double_array2 = np.frompyfunc(f,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">print(double_array2(x,np.pi))</span><br></pre></td></tr></table></figure>

<pre><code>[0.0 0.03173325912716963 0.06346651825433926 0.09519977738150888
 0.12693303650867852 0.15866629563584816 0.19039955476301776
 0.22213281389018744 0.25386607301735703 0.28559933214452665
 0.31733259127169633 0.34906585039886595 0.3807991095260355
 0.4125323686532052 0.44426562778037487 0.47599888690754444
 0.5077321460347141 0.5394654051618838 0.5711986642890533
 0.6029319234162229 0.6346651825433927 0.6663984416705622
 0.6981317007977319 0.7298649599249015 0.761598219052071
 0.7933314781792408 0.8250647373064104 0.85679799643358 0.8885312555607497
 0.9202645146879191 0.9519977738150889 0.9837310329422585
 1.0154642920694281 1.0471975511965979 1.0789308103237676
 1.110664069450937 1.1423973285781066 1.1741305877052763
 1.2058638468324459 1.2375971059596156 1.2693303650867853
 1.3010636242139548 1.3327968833411243 1.364530142468294
 1.3962634015954638 1.4279966607226333 1.459729919849803
 1.4914631789769728 1.523196438104142 1.5549296972313118
 1.5866629563584815 1.6183962154856513 1.6501294746128208
 1.6818627337399903 1.71359599286716 1.7453292519943295 1.7770625111214995
 1.808795770248669 1.8405290293758383 1.8722622885030082
 1.9039955476301778 1.9357288067573475 1.967462065884517 1.999195325011687
 2.0309285841388562 2.0626618432660258 2.0943951023931957
 2.126128361520365 2.157861620647535 2.1895948797747042 2.221328138901874
 2.2530613980290437 2.284794657156213 2.316527916283383 2.3482611754105527
 2.379994434537722 2.4117276936648917 2.443460952792061 2.475194211919231
 2.5069274710464007 2.5386607301735706 2.57039398930074 2.6021272484279097
 2.633860507555079 2.6655937666822487 2.6973270258094186 2.729060284936588
 2.760793544063758 2.7925268031909276 2.824260062318097 2.8559933214452666
 2.887726580572436 2.919459839699606 2.9511930988267756 2.9829263579539456
 3.0146596170811146 3.046392876208284 3.078126135335454 3.1098593944626236
 3.141592653589793]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">2</span>,<span class="number">-3</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">7</span>,<span class="number">-1</span>]])</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">3</span>,<span class="number">16</span>])</span><br><span class="line">x = np.linalg.solve(a,b)</span><br><span class="line">print(x)</span><br><span class="line">np.allclose(np.dot(a,x),b)<span class="comment">#检验结果</span></span><br></pre></td></tr></table></figure>

<pre><code>[-3.66666667  7.         29.33333333]





True</code></pre><h3 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h3><p><strong>表格型数据</strong>:<br>一行为记录，一列为一个属性/特征，包含行索引、列索引</p>
<h4 id="series"><a href="#series" class="headerlink" title="series"></a>series</h4><p>索引 + 数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bser.index<span class="comment">#可进行单独赋值</span></span><br><span class="line">bser.values</span><br></pre></td></tr></table></figure>
<p>Series切片按照位置切入如<code>cser[1:2]</code>和以前无异，都只取到一个值，但若根据自己设定的index切如<code>cser[&#39;a&#39;:&#39;b&#39;]</code>则包含索引为<code>&#39;a&#39;</code>和<code>&#39;b&#39;</code>的两个值</p>
<h4 id="dataframe"><a href="#dataframe" class="headerlink" title="dataframe"></a>dataframe</h4><p>创建：<code>pd.DataFrame()</code></p>
<p>关注<code>df.index</code>和<code>df.columns</code>和<code>df.values</code></p>
<p>从csv文件读取：<code>pd.read_csv(&#39;filename&#39;,encoding = &#39;gb2312&#39;index_col = &#39;&#39;)</code></p>
<p>写入csv：<code>df.to_csv()</code><strong>注意是方法不是函数</strong></p>
<p>读写excel同理，<code>pd.read_excel()</code>和<code>df.to_excel()</code><em>#注意有参数sheet_nname</em></p>
<p>添加列：<code>df[&#39;colname&#39;] = [data]</code></p>
<p>添加行：</p>
<ol>
<li><code>df.loc[index] = {data}#like dic</code></li>
<li><code>df.append(another_df)</code></li>
<li><pre><code class="python">   pieces = [df1,df2]
   pd.concat(pieces)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">删除：df.drop()#注意inplace参数，改为True直接对原df修改</span><br><span class="line"></span><br><span class="line">交换元素：&#96;df.reindex()&#96;#参数&#96;index &#x3D; ind（axis &#x3D; 0)&#96; or &#96;columns &#x3D; col(axis &#x3D; 1)&#96; or &#96;df.loc[:,col]&#96; or &#96;df.iloc[:,[0,2,1]]&#96;</span><br><span class="line"></span><br><span class="line">**loc基于索引，iloc基于位置**</span><br><span class="line"></span><br><span class="line">选择单个值：&#96;df.at()&#96;和&#96;df.iat()&#96;</span><br><span class="line">&#96;df[df[&#39;姓名&#39;.str.contains(&#39;陈&#39;)]&#96;</span><br><span class="line"></span><br><span class="line">#### 数据分析</span><br><span class="line">计数 &#96;len()&#96;</span><br><span class="line"></span><br><span class="line">&#96;df.groupby().XX.count()&#96; </span><br><span class="line"></span><br><span class="line">&#96;apply&#96;可以作用在一列、一行甚至一个元素上</span><br><span class="line"></span><br><span class="line">多函数聚合&#96;agg(fun1,fun2)&#96;方法</span><br><span class="line"></span><br><span class="line">注意int和np.int，后者可以作用在向量上，或者用applymap(int)即可作用在每一个元素上 </span><br><span class="line"></span><br><span class="line">#### 合并</span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">append()#加行到dataframe</span><br><span class="line">concat#连接pandas对象</span><br><span class="line">join()#SQL类型连接</span><br></pre></td></tr></table></figure>
<span class="comment">#### 描述数据</span>
`df.describe()`,`df.info()`
</code></pre>
</li>
</ol>
<h4 id="相关分析"><a href="#相关分析" class="headerlink" title="相关分析"></a>相关分析</h4><p><code>df.cor()</code></p>
<h3 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h3><p><code>import matplotlib.pyplot as plt</code></p>
<p>scatter散点图</p>
<p>bar柱状图</p>
<p>hist直方图</p>
<p>boxplot箱线图</p>
<h3 id="seaborn包"><a href="#seaborn包" class="headerlink" title="seaborn包"></a>seaborn包</h3><p>heatmap热图<br>pairplot加入回归线的图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot([<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://i.loli.net/2020/07/28/xOMY6iGT1C8bF9Q.png" alt="output_70_0.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">t = np.arange(<span class="number">0.</span>,<span class="number">4.</span>,<span class="number">0.1</span>)</span><br><span class="line">plt.plot(t,t,t,t+<span class="number">2</span>,t,t**<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x184b7bfa588&gt;,
 &lt;matplotlib.lines.Line2D at 0x184b85a4d48&gt;,
 &lt;matplotlib.lines.Line2D at 0x184b85a4f08&gt;]</code></pre><p><img src="https://i.loli.net/2020/07/28/54T2W3nCBEVpLeX.png" alt="output_71_1.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = np.linspace(-np.pi,np.pi,<span class="number">300</span>)</span><br><span class="line">plt.plot(X,np.sin(X),X,np.cos(X))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://i.loli.net/2020/07/28/MjTx8g4m7kCr6y1.png" alt="output_72_0.png"></p>
<p>属性控制： linestyle,marker,linewidth,label</p>
<p>plt.legend()</p>
<p>子图: <code>subplot()</code>函数或者axis</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig,(ax0,ax1) = plt.subplots(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">ax0.plot()</span><br><span class="line">ax1.plot()</span><br></pre></td></tr></table></figure>

<p>pandas也有绘图方法<code>df.plot()</code>,<br><code>plt.xticks(rotation = 90)</code>横坐标竖过来写</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python_project(3)</title>
    <url>/2020/05/30/python-project-3/</url>
    <content><![CDATA[<h1 id="python大作业"><a href="#python大作业" class="headerlink" title="python大作业"></a>python大作业</h1><h2 id="新冠肺炎相关B站视频爬取及评论分析"><a href="#新冠肺炎相关B站视频爬取及评论分析" class="headerlink" title="新冠肺炎相关B站视频爬取及评论分析"></a>新冠肺炎相关B站视频爬取及评论分析</h2><h3 id="PART-Ⅲ"><a href="#PART-Ⅲ" class="headerlink" title="PART Ⅲ"></a>PART Ⅲ</h3><a id="more"></a>
<h4 id="LDA分析"><a href="#LDA分析" class="headerlink" title="LDA分析"></a>LDA分析</h4><p>LDA是一种文档主题生成模型，包含词、主题和文档三层结构。</p>
<ol>
<li>主题模型在自然语言处理等领域是用来在一系列文档中发现抽象主题的一种统计模型。判断两个文档相似性的传统方法是通过查看两个文档共同出现的单词的多少，如TF（词频）、TF-IDF（词频—逆向文档频率）等，这种方法没有考虑文字背后的语义关联，例如，两个文档共同出现的单词很少甚至没有，但两个文档是相似的，因此在判断文档相似性时，需要使用主题模型进行语义分析并判断文档相似性。如果一篇文档有多个主题，则一些特定的可代表不同主题的词语就会反复出现，此时，运用主题模型，能够发现文本中使用词语的规律，并且把规律相似的文本联系到一起，以寻求非结构化的文本集中的有用信息。例如，在美的电热水器的商品评论文本数据中，代表电热水器特征的词语如“安装”“出水量”“服务”等会频繁地出现在评论中，运用主题模型，把热水器代表性特征相关的情感描述性词语与对应特征的词语联系起来，从而深入了解用户对电热水器的关注点及用户对于某一特征的情感倾向</li>
</ol>
<ol start="2">
<li>LDA主题模型潜在狄利克雷分配，即LDA模型（Latent Dirichlet Allocation，LDA）是由Blei等人在2003年提出的生成式主题模型。所谓生成模型，就是说，我们认为一篇文章的每个词都是通过“以一定概率选择了某个主题，并从这个主题中以一定概率选择某个词语”这样一个过程得到。文档到主题服从多项式分布，主题到词服从多项式分布。LDA模型也被称为3层贝叶斯概率模型，包含文档（d）、主题（z）、词（w）3层结构，能够有效对文本进行建模，和传统的空间向量模型（VSM）相比，增加了概率的信息。通过LDA主题模型，能够挖掘数据集中的潜在主题，进而分析数据集的集中关注点及其相关特征词。LDA模型采用词袋模型（Bag of Words，BOW）将每一篇文档视为一个词频向量，从而将文本信息转化为易于建模的数字信息。定义词表大小为L，一个L维向量（1，0，0，…，0，0）表示一个词。由N个词构成的评论记为d=（w1，w2，…，wN）。假设某一商品的评论集D由M篇评论构成，记为D=（d1，d2，…，dM）。M篇评论分布着K个主题，记为Zi=（i=1，2，…，K）。记a和b为狄利克雷函数的先验参数，q为主题在文档中的多项分布的参数，其服从超参数为a的Dirichlet先验分布，f为词在主题中的多项分布的参数，其服从超参数b的Dirichlet先验分布。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> gensim <span class="keyword">import</span> corpora, models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入情感分析后的数据</span></span><br><span class="line">data = pd.read_csv(<span class="string">"./results1.csv"</span>, encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">posdata = data[data[<span class="string">'content_type'</span>] == <span class="number">1</span>]</span><br><span class="line">negdata = data[data[<span class="string">'content_type'</span>] == <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立词典</span></span><br><span class="line">pos_dict = corpora.Dictionary([[i] <span class="keyword">for</span> i <span class="keyword">in</span> posdata[<span class="string">'word'</span>]])  <span class="comment"># 正面</span></span><br><span class="line">neg_dict = corpora.Dictionary([[i] <span class="keyword">for</span> i <span class="keyword">in</span> negdata[<span class="string">'word'</span>]])  <span class="comment"># 负面</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立语料库</span></span><br><span class="line">pos_corpus = [pos_dict.doc2bow(j) <span class="keyword">for</span> j <span class="keyword">in</span> [[i] <span class="keyword">for</span> i <span class="keyword">in</span> posdata[<span class="string">'word'</span>]]]  <span class="comment"># 正面</span></span><br><span class="line">neg_corpus = [neg_dict.doc2bow(j) <span class="keyword">for</span> j <span class="keyword">in</span> [[i] <span class="keyword">for</span> i <span class="keyword">in</span> negdata[<span class="string">'word'</span>]]]   <span class="comment"># 负面</span></span><br></pre></td></tr></table></figure>

<h4 id="主题数寻优"><a href="#主题数寻优" class="headerlink" title="主题数寻优"></a>主题数寻优</h4><p>基于相似度的自适应最优LDA模型选择方法，确定主题数并进行主题分析。实验证明该方法可以在不需要人工调试主题数目的情况下，用相对少的迭代找到最优的主题结构。</p>
<p>具体步骤如下：</p>
<ol>
<li>取初始主题数k值，得到初始模型，计算各主题之间的相似度（平均余弦距离）。</li>
<li>增加或减少k值，重新训练模型，再次计算各主题之间的相似度。</li>
<li>重复步骤2直到得到最优k值。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主题数寻优</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lda_k</span><span class="params">(x_corpus, x_dict)</span>:</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化平均余弦相似度</span></span><br><span class="line">    mean_similarity = []</span><br><span class="line">    mean_similarity.append(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 循环生成主题并计算主题间相似度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> np.arange(<span class="number">2</span>,<span class="number">11</span>):</span><br><span class="line">        <span class="comment"># LDA模型训练</span></span><br><span class="line">        lda = models.LdaModel(x_corpus, num_topics = i, id2word = x_dict)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> np.arange(i):</span><br><span class="line">            term = lda.show_topics(num_words = <span class="number">50</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 提取各主题词</span></span><br><span class="line">        top_word = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> np.arange(i):</span><br><span class="line">            top_word.append([<span class="string">''</span>.join(re.findall(<span class="string">'"(.*)"'</span>,i)) \</span><br><span class="line">                             <span class="keyword">for</span> i <span class="keyword">in</span> term[k][<span class="number">1</span>].split(<span class="string">'+'</span>)])  <span class="comment"># 列出所有词</span></span><br><span class="line">           </span><br><span class="line">        <span class="comment"># 构造词频向量</span></span><br><span class="line">        word = sum(top_word,[])  <span class="comment"># 列出所有的词   </span></span><br><span class="line">        unique_word = set(word)  <span class="comment"># 去除重复的词</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 构造主题词列表，行表示主题号，列表示各主题词</span></span><br><span class="line">        mat = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> np.arange(i):</span><br><span class="line">            top_w = top_word[j]</span><br><span class="line">            mat.append(tuple([top_w.count(k) <span class="keyword">for</span> k <span class="keyword">in</span> unique_word]))  </span><br><span class="line">            </span><br><span class="line">        p = list(itertools.permutations(list(np.arange(i)),<span class="number">2</span>))</span><br><span class="line">        l = len(p)</span><br><span class="line">        top_similarity = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> np.arange(l):</span><br><span class="line">            vector1 = mat[p[w][<span class="number">0</span>]]</span><br><span class="line">            vector2 = mat[p[w][<span class="number">1</span>]]</span><br><span class="line">            top_similarity.append(cos(vector1, vector2))</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 计算平均余弦相似度</span></span><br><span class="line">        mean_similarity.append(sum(top_similarity)/l)</span><br><span class="line">    <span class="keyword">return</span>(mean_similarity)</span><br><span class="line"></span><br><span class="line">pos_k = lda_k(pos_corpus, pos_dict)</span><br><span class="line">neg_k = lda_k(neg_corpus, neg_dict)</span><br><span class="line"></span><br><span class="line">font = FontProperties(size=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'KaiTi'</span>] <span class="comment"># 指定默认字体</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span> <span class="comment"># 解决保存图像是负号'-'显示为方块的问题</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">8</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">211</span>)</span><br><span class="line">ax1.plot(pos_k)</span><br><span class="line">ax1.set_xlabel(<span class="string">'正面评论LDA主题数寻优'</span>, fontproperties=font)</span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">212</span>)</span><br><span class="line">ax2.plot(neg_k)</span><br><span class="line">ax2.set_xlabel(<span class="string">'负面评论LDA主题数寻优'</span>, fontproperties=font)</span><br></pre></td></tr></table></figure>
<p>得到如图所示的结果：<br><img src="https://i.loli.net/2020/05/30/QWDiz9lpAw6Vats.png" alt="QGQ_I_WWI11_RU27P665AIP.png"></p>
<h4 id="评价主题分析结果"><a href="#评价主题分析结果" class="headerlink" title="评价主题分析结果"></a>评价主题分析结果</h4><p>根据主题数寻优结果，使用Python的Gensim模块对正面评论数据和负面评论数据分别构建LDA主题模型，设置主题数为3，经过LDA主题分析后，每个主题下生成10个最有可能出现的词语以及相应的概率。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pos_lda = models.LdaModel(pos_corpus, num_topics = <span class="number">3</span>, id2word = pos_dict)  </span><br><span class="line">neg_lda = models.LdaModel(neg_corpus, num_topics = <span class="number">3</span>, id2word = neg_dict)</span><br><span class="line"></span><br><span class="line">pos_lda.print_topics(num_words = <span class="number">10</span>)</span><br><span class="line">neg_lda.print_topics(num_words = <span class="number">10</span>)</span><br><span class="line"><span class="keyword">import</span> pyLDAvis</span><br><span class="line"><span class="keyword">from</span> pyLDAvis <span class="keyword">import</span> gensim</span><br><span class="line"></span><br><span class="line">vis = pyLDAvis.gensim.prepare(pos_lda,pos_corpus,pos_dict)</span><br><span class="line"><span class="comment"># 需要的三个参数都可以从硬盘读取的，前面已经存储下来了</span></span><br><span class="line">print(<span class="string">'done'</span>)</span><br><span class="line"><span class="comment"># 在浏览器中心打开一个界面</span></span><br><span class="line">pyLDAvis.show(vis)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在notebook的output cell中显示</span></span><br><span class="line"><span class="comment">#pyLDAvis.display(vis)</span></span><br></pre></td></tr></table></figure>
<p>针对负面评论的分析和上面步骤一致：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vis = pyLDAvis.gensim.prepare(neg_lda,neg_corpus,neg_dict)</span><br><span class="line"><span class="comment"># 需要的三个参数都可以从硬盘读取的，前面已经存储下来了</span></span><br><span class="line">print(<span class="string">'done'</span>)</span><br><span class="line"><span class="comment"># 在浏览器中心打开一个界面</span></span><br><span class="line">pyLDAvis.show(vis)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在notebook的output cell中显示</span></span><br><span class="line"><span class="comment">#pyLDAvis.display(vis)</span></span><br></pre></td></tr></table></figure>
<p>结果如下图所示。<br><img src="https://i.loli.net/2020/05/30/T3yFIjs5MVU7aJv.png" alt="NI2LLLZ_Y_@A4QF@XDY9_FB.png"></p>
<p>可以发现，出现了一些误被分词的流行词如“川建国”等。这个问题在于<a href="https://aurorasxh.github.io/2020/05/30/python-project-2/" target="_blank" rel="noopener">python大作业partⅡ</a>中的<code>jiaba</code>分词过程中的误差。由此也可判单<code>jiaba</code>分词对于流行词与部分过于口语化的词的分词效果的不足。</p>
<p>LDA分析部分参考了<a href="https://www.kesci.com/home/project/5ead7455366f4d002d745eb0/code" target="_blank" rel="noopener">该网站</a></p>
<p>接下来还有语义情感的进一步分析。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python_project(2)</title>
    <url>/2020/05/30/python-project-2/</url>
    <content><![CDATA[<h1 id="python大作业"><a href="#python大作业" class="headerlink" title="python大作业"></a>python大作业</h1><h2 id="新冠肺炎相关B站视频爬取及评论分析"><a href="#新冠肺炎相关B站视频爬取及评论分析" class="headerlink" title="新冠肺炎相关B站视频爬取及评论分析"></a>新冠肺炎相关B站视频爬取及评论分析</h2><h3 id="PART-Ⅱ"><a href="#PART-Ⅱ" class="headerlink" title="PART Ⅱ"></a>PART Ⅱ</h3><a id="more"></a>

<h4 id="视频评论的爬取"><a href="#视频评论的爬取" class="headerlink" title="视频评论的爬取"></a>视频评论的爬取</h4><p>我们调用了B站视频评论的<a href="https://api.bilibili.com/x/v2/reply?jsonp=jsonp&pn=1&type=1&oid=84850049&sort=2" target="_blank" rel="noopener">API</a>进行爬取，本来想爬取全部评论的，后来考虑到电脑运算能力的问题，所以选取了前150页的评论。在爬取过程中，出现了<code>TypeError</code>报错，检查发现从API中读取的json文件中有部分<code>item</code>是空的，因此报错。于是采用<code>try...except</code>结构进行规避。爬取部分代码如下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_comments</span><span class="params">(path,cmt_lst)</span>:</span></span><br><span class="line">    </span><br><span class="line">    data=&#123;<span class="string">'cmt'</span>:cmt_lst&#125;</span><br><span class="line">    df=pd.DataFrame(data)</span><br><span class="line">    df.to_csv(path,encoding=<span class="string">'utf_8_sig'</span>,index=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comments</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    api=<span class="string">'https://api.bilibili.com/x/v2/reply?jsonp=jsonp&amp;pn=&#123;&#125;&amp;type=1&amp;oid=&#123;&#125;&amp;sort=2'</span> <span class="comment">#0为评论页数，1为av号</span></span><br><span class="line">    video_info=pd.read_csv(<span class="string">'video_info_100.csv'</span>)</span><br><span class="line">    oid_list=video_info[<span class="string">'av_oid'</span>].tolist()</span><br><span class="line">  </span><br><span class="line">    headers=&#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36'</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> oid <span class="keyword">in</span> oid_list:</span><br><span class="line">        print(oid)</span><br><span class="line">        comments=[]</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">150</span>):</span><br><span class="line">            API=api.format(num+<span class="number">1</span>,oid)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = requests.get(API,headers=headers)</span><br><span class="line">                <span class="comment">#print(r.status_code)</span></span><br><span class="line">                r_json=r.json()</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> r_json[<span class="string">'data'</span>][<span class="string">'replies'</span>]:</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">#print(item['content']['message'])</span></span><br><span class="line">                        comments.append(item[<span class="string">'content'</span>][<span class="string">'message'</span>])</span><br><span class="line">                <span class="keyword">except</span> TypeError:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> err:</span><br><span class="line">                print(<span class="string">'err'</span>)</span><br><span class="line"></span><br><span class="line">        cmt_lst=comments</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        file_name=<span class="string">'&#123;&#125;_comments.csv'</span>.format(oid)</span><br><span class="line">        path=<span class="string">'./video_comments/'</span>+file_name</span><br><span class="line">        <span class="keyword">with</span> open(path,<span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        save_comments(path,cmt_lst)</span><br><span class="line">        print(oid,<span class="string">':done'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    bt = time.time()</span><br><span class="line">    get_comments()</span><br><span class="line">    et = time.time()</span><br><span class="line">    runtime = et - bt</span><br><span class="line">    print(<span class="string">'程序运行时间为：'</span>,runtime)</span><br></pre></td></tr></table></figure>

<h4 id="视频评论的情感分析"><a href="#视频评论的情感分析" class="headerlink" title="视频评论的情感分析"></a>视频评论的情感分析</h4><p>在这里我们通过<code>SnowNlp</code>包进行评论的语义情感分析。</p>
<h5 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h5><p>考虑到B站评论与微博评论的相似性，我们采用了12万条微博评论（正面评论与负面评论各6万条）进行训练，训练结果储存为<code>new_sentiment.marshal.3</code>文件 。代码如下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> SnowNLP</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> sentiment</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用微博评论（正面负面各6万条共12万条）训练snownlp</span></span><br><span class="line">pd_all = pd.read_csv(<span class="string">'weibo_senti_100k.csv'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pd_all[pd_all.label == <span class="number">1</span>][<span class="string">'review'</span>].tolist():</span><br><span class="line">    f = open(<span class="string">'pos.txt'</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    f.write(i + <span class="string">'\n'</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> pd_all[pd_all.label == <span class="number">0</span>][<span class="string">'review'</span>].tolist():</span><br><span class="line">    f = open(<span class="string">'neg.txt'</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    f.write(j + <span class="string">'\n'</span>)</span><br><span class="line">    f.close()</span><br><span class="line">sentiment.train(<span class="string">'1_neg.txt'</span>,<span class="string">'1_pos.txt'</span>)</span><br><span class="line">sentiment.save(<span class="string">'new_sentiment.marshal'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#视频标题评分</span></span><br><span class="line">file = pd.read_csv(<span class="string">'video_info_100.csv'</span>)</span><br><span class="line">video_info_df = pd.DataFrame(file)</span><br><span class="line">title_list = video_info_df[<span class="string">'name'</span>].tolist()</span><br><span class="line">title_scores = []</span><br><span class="line"><span class="keyword">for</span> titles <span class="keyword">in</span> title_list:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">""</span>.join(jieba.analyse.textrank(titles)) != <span class="string">''</span>:</span><br><span class="line">        scores = SnowNLP(<span class="string">""</span>.join(jieba.analyse.textrank(titles)))</span><br><span class="line">        title_scores.append((scores.sentiments))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        scores = SnowNLP(titles)</span><br><span class="line">        title_scores.append((scores.sentiments))</span><br><span class="line"></span><br><span class="line">video_info_df[<span class="string">'title_scores'</span>] = title_scores</span><br><span class="line">video_info_df.to_csv(<span class="string">"./video_info_100.csv"</span>,encoding = <span class="string">'utf_8_sig'</span>,index = <span class="literal">False</span>)</span><br><span class="line">print(<span class="string">'work done'</span>)</span><br></pre></td></tr></table></figure>

<h5 id="B站视频评论情感分析"><a href="#B站视频评论情感分析" class="headerlink" title="B站视频评论情感分析"></a>B站视频评论情感分析</h5><p>然后即可运用训练好的模型对评论进行语义情感分析，并根据得分进行分级。-1为负面，0为中性，1为正面。得到结果储存为csv文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> SnowNLP</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line">    file = pd.read_csv('video_info_100.csv')</span><br><span class="line">    video_info_df = pd.DataFrame(file)</span><br><span class="line">    <span class="keyword">for</span> av <span class="keyword">in</span> video_info_df[<span class="string">'av_oid'</span>].tolist():</span><br><span class="line">        file_name = <span class="string">'./video_comments/&#123;&#125;_comments.csv'</span>.format(av)</span><br><span class="line">        <span class="comment">#print(file_name)</span></span><br><span class="line">        comments_file = pd.read_csv(file_name)</span><br><span class="line">        comments_df = pd.DataFrame(comments_file)</span><br><span class="line">        comments_scores = []</span><br><span class="line">        levels = []</span><br><span class="line">        <span class="keyword">for</span> comments <span class="keyword">in</span> comments_df[<span class="string">'cmt'</span>].tolist():</span><br><span class="line">            <span class="keyword">if</span> <span class="string">""</span>.join(jieba.analyse.textrank(comments)) != <span class="string">''</span>:</span><br><span class="line">                scores = SnowNLP(<span class="string">""</span>.join(jieba.analyse.textrank(comments)))</span><br><span class="line">                comments_scores.append((scores.sentiments))</span><br><span class="line">                <span class="keyword">if</span> float(scores.sentiments) &gt;= <span class="number">0.65</span>:</span><br><span class="line">                    levels.append(<span class="string">'1'</span>)</span><br><span class="line">                <span class="keyword">elif</span> float(scores.sentiments) &gt;= <span class="number">0.35</span> <span class="keyword">and</span> float(scores.sentiments) &lt; <span class="number">0.65</span>:</span><br><span class="line">                    levels.append(<span class="string">'0'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    levels.append(<span class="string">'-1'</span>)                </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                scores = SnowNLP(comments)</span><br><span class="line">                comments_scores.append((scores.sentiments))</span><br><span class="line">                <span class="keyword">if</span> float(scores.sentiments) &gt;= <span class="number">0.6</span>:</span><br><span class="line">                    levels.append(<span class="string">'1'</span>)</span><br><span class="line">                <span class="keyword">elif</span> float(scores.sentiments) &gt;= <span class="number">0.4</span> <span class="keyword">and</span> float(scores.sentiments) &lt; <span class="number">0.6</span>:</span><br><span class="line">                    levels.append(<span class="string">'0'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    levels.append(<span class="string">'-1'</span>)</span><br><span class="line">        comments_df[<span class="string">'comments_scores'</span>] = comments_scores</span><br><span class="line">        comments_df[<span class="string">'levels'</span>] = levels</span><br><span class="line">        comments_df.to_csv(file_name,encoding = <span class="string">'utf_8_sig'</span>,index = <span class="literal">False</span>)</span><br><span class="line">        print(av,<span class="string">":done"</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h4 id="词频分析"><a href="#词频分析" class="headerlink" title="词频分析"></a>词频分析</h4><p>得到了所有的评论后，进行了词频分析。运用<code>jiaba</code>包进行分词和词性分析，绘制词云，并根据名词词频运用pyecharts包进行南丁格尔玫瑰图的绘制。<br>代码如下。<br>首先载入所需第三方库，并将所有评论汇集到<code>comments.csv</code>文件中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> jieba.posseg <span class="keyword">as</span> psg</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Pie</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.globals <span class="keyword">import</span> ThemeType</span><br><span class="line"><span class="keyword">from</span> pyecharts.globals <span class="keyword">import</span> CurrentConfig, NotebookType</span><br><span class="line">CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_LAB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comments</span><span class="params">(path)</span></span></span><br><span class="line">for maindir, subdir, file_name_list in os.walk(path):</span><br><span class="line">    file1 = pd.read_csv(path + <span class="string">'/'</span> + file_name_list[<span class="number">0</span>])</span><br><span class="line">    comments_info_df1 = pd.DataFrame(file1)</span><br><span class="line">    comments_info_df1.to_csv(<span class="string">'./comments.csv'</span>,index = <span class="literal">False</span>,encoding = <span class="string">'utf_8_sig'</span>)</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> file_name_list[<span class="number">1</span>:]:        </span><br><span class="line">        file = pd.read_csv(path + <span class="string">'/'</span> + filename)</span><br><span class="line">        comments_info_df = pd.DataFrame(file)</span><br><span class="line">        comments_info_df.to_csv(<span class="string">'./comments.csv'</span>,mode = <span class="string">'a'</span>,header = <span class="literal">False</span>,index = <span class="literal">False</span>,encoding = <span class="string">'utf_8_sig'</span>)</span><br></pre></td></tr></table></figure>
<p>一共获得了25万余条评论。<br>然后，运用<code>jiaba</code>包进行分词。因为评论条数很多，所以程序运行起来很慢，花了约六小时才完成分词。分词结果存入<code>results1.csv</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_words</span><span class="params">(file,result_file_path)</span>:</span>    </span><br><span class="line">    c_df = pd.DataFrame(file)</span><br><span class="line">    reviews = c_df[[<span class="string">'cmt'</span>,<span class="string">'levels'</span>]]</span><br><span class="line">    content = c_df[<span class="string">'cmt'</span>]</span><br><span class="line">    strinfo = re.compile(<span class="string">'[0-9a-zA-Z]|热词系列|纳豆|奶奶|豆奶|'</span>)</span><br><span class="line">    content = content.apply(<span class="keyword">lambda</span> x:strinfo.sub(<span class="string">''</span>,x))</span><br><span class="line">    worker = <span class="keyword">lambda</span> s:[(x.word,x.flag) <span class="keyword">for</span> x <span class="keyword">in</span> psg.cut(s)]</span><br><span class="line">    seg_word = content.apply(worker)</span><br><span class="line">    seg_word.head()</span><br><span class="line"></span><br><span class="line">    n_word = seg_word.apply(<span class="keyword">lambda</span> x: len(x))  <span class="comment"># 每一评论中词的个数</span></span><br><span class="line">    n_content = [[x+<span class="number">1</span>]*y <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(list(seg_word.index), list(n_word))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将嵌套的列表展开，作为词所在评论的id</span></span><br><span class="line">    index_content = sum(n_content,[])</span><br><span class="line"></span><br><span class="line">    seg_word = sum(seg_word, [])</span><br><span class="line">    <span class="comment"># 词</span></span><br><span class="line">    word = [x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> seg_word]</span><br><span class="line">    <span class="comment"># 词性</span></span><br><span class="line">    nature = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> seg_word]</span><br><span class="line"></span><br><span class="line">    content_type = [[x]*y <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(list(reviews[<span class="string">'levels'</span>]), list(n_word))]</span><br><span class="line">    <span class="comment"># 评论类型</span></span><br><span class="line">    content_type = sum(content_type, [])</span><br><span class="line"></span><br><span class="line">    result = pd.DataFrame(&#123;<span class="string">"index_content"</span>:index_content, </span><br><span class="line">                           <span class="string">"word"</span>:word,</span><br><span class="line">                           <span class="string">"nature"</span>:nature,</span><br><span class="line">                           <span class="string">"content_type"</span>:content_type&#125;)</span><br><span class="line">    result.head()</span><br><span class="line"></span><br><span class="line">    result = result[result[<span class="string">'nature'</span>] != <span class="string">'x'</span>]  <span class="comment"># x表示标点符号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除停用词</span></span><br><span class="line">    stop_path = open(<span class="string">"./stoplist.txt"</span>, <span class="string">'r'</span>,encoding=<span class="string">'UTF-8'</span>)</span><br><span class="line">    stop = stop_path.readlines()</span><br><span class="line">    stop = [x.replace(<span class="string">'\n'</span>, <span class="string">''</span>) <span class="keyword">for</span> x <span class="keyword">in</span> stop]</span><br><span class="line">    word = list(set(word) - set(stop))</span><br><span class="line">    result = result[result[<span class="string">'word'</span>].isin(word)]</span><br><span class="line">    result.head()</span><br><span class="line"></span><br><span class="line">    n_word = list(result.groupby(by = [<span class="string">'index_content'</span>])[<span class="string">'index_content'</span>].count())</span><br><span class="line">    index_word = [list(np.arange(<span class="number">0</span>, y)) <span class="keyword">for</span> y <span class="keyword">in</span> n_word]</span><br><span class="line">    <span class="comment"># 词语在该评论的位置</span></span><br><span class="line">    index_word = sum(index_word, [])</span><br><span class="line">    <span class="comment"># 合并评论id</span></span><br><span class="line">    result[<span class="string">'index_word'</span>] = index_word</span><br><span class="line">    result.head()</span><br><span class="line"></span><br><span class="line">    ind = result[[<span class="string">'n'</span> <span class="keyword">in</span> x <span class="keyword">for</span> x <span class="keyword">in</span> result[<span class="string">'nature'</span>]]][<span class="string">'index_content'</span>].unique()</span><br><span class="line">    result = result[[x <span class="keyword">in</span> ind <span class="keyword">for</span> x <span class="keyword">in</span> result[<span class="string">'index_content'</span>]]]</span><br><span class="line">    result.head()</span><br><span class="line">    result.to_csv(result_file_path,index = <span class="number">0</span>,encoding = <span class="string">'utf_8_sig'</span>)</span><br></pre></td></tr></table></figure>

<p>分词完成后，取词频等就顺理成章了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pick_frequency</span><span class="params">(raw_file_path)</span>:</span></span><br><span class="line">    result = pd.read_csv(raw_file_path)</span><br><span class="line">    frequencies = result.groupby(<span class="string">'word'</span>)[<span class="string">'word'</span>].count()</span><br><span class="line">    frequencies = frequencies.sort_values(ascending = <span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> frequencies</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pick_top10_noun</span><span class="params">(raw_file_path)</span></span></span><br><span class="line">    result = pd.read_csv(raw_file_path)</span><br><span class="line">    result_n = result[(result[<span class="string">'nature'</span>] == <span class="string">'ns'</span>) | ( result[<span class="string">'nature'</span>] == <span class="string">'vn'</span> ) | (result[<span class="string">'nature'</span>] == <span class="string">'n'</span> )| ( result[<span class="string">'nature'</span>] == <span class="string">'nr'</span> )| ( result[<span class="string">'nature'</span>] == <span class="string">'nrt'</span> )]</span><br><span class="line">    frequencies = result_n.groupby(<span class="string">'word'</span>)[<span class="string">'word'</span>].count()</span><br><span class="line">    frequencies = frequencies.sort_values(ascending = <span class="literal">False</span>)</span><br><span class="line">    top_10 = frequencies[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">    noun = top_10.index.tolist()</span><br><span class="line">    num = list(top_10)</span><br><span class="line">    nnlist = [list(z) <span class="keyword">for</span> z <span class="keyword">in</span> zip(noun,num)]</span><br><span class="line">    <span class="keyword">return</span> nnlist</span><br></pre></td></tr></table></figure>

<p>运用<code>wordcloud</code>包进行词云绘制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_word_cloud</span><span class="params">(raw_file_path,raw_image_path,font_path_,save_image_path)</span>:</span></span><br><span class="line">    result = pd.read_csv(raw_file_path)</span><br><span class="line"></span><br><span class="line">    frequencies = result.groupby(<span class="string">'word'</span>)[<span class="string">'word'</span>].count()</span><br><span class="line">    frequencies = frequencies.sort_values(ascending = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    backgroud_Image=plt.imread(raw_image_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自己上传中文字体到kesci</span></span><br><span class="line">    <span class="comment">#font_path = './Deng.ttf'</span></span><br><span class="line">    wordcloud = WordCloud(font_path=font_path_, <span class="comment"># 设置字体，不设置就会出现乱码</span></span><br><span class="line">                          max_words = <span class="number">1000</span>,</span><br><span class="line">                          margin = <span class="number">1</span>,</span><br><span class="line">                          scale = <span class="number">10</span>,</span><br><span class="line">                          background_color=<span class="string">'white'</span>,</span><br><span class="line">                          mask = backgroud_Image)<span class="comment"># 词云形状</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    my_wordcloud = wordcloud.fit_words(frequencies)</span><br><span class="line">    plt.imshow(my_wordcloud)</span><br><span class="line">    plt.axis(<span class="string">'off'</span>) </span><br><span class="line">    plt.savefig(save_image_path,dpi = <span class="number">600</span>)</span><br></pre></td></tr></table></figure>

<p>运用<code>pyecharts</code>包绘制南丁格尔玫瑰图。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_ndge_plot</span><span class="params">(word_list,color_series,final_path)</span>:</span>    </span><br><span class="line">    <span class="comment"># 实例化Pie类</span></span><br><span class="line">    pie1 = Pie(init_opts=opts.InitOpts(width=<span class="string">'1350px'</span>, height=<span class="string">'750px'</span>,theme=ThemeType.WESTEROS))</span><br><span class="line">    <span class="comment"># 设置颜色</span></span><br><span class="line">    pie1.set_colors(color_series)</span><br><span class="line"></span><br><span class="line">    pie1.add(<span class="string">""</span>, word_list,</span><br><span class="line">            radius=[<span class="string">"20%"</span>, <span class="string">"100%"</span>],</span><br><span class="line">            center=[<span class="string">"30%"</span>, <span class="string">"65%"</span>],</span><br><span class="line">            rosetype=<span class="string">"area"</span></span><br><span class="line">            ) </span><br><span class="line"></span><br><span class="line">    pie1.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">'test'</span>),</span><br><span class="line">                         legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">                         toolbox_opts=opts.ToolboxOpts())</span><br><span class="line">    <span class="comment"># 设置系列配置项</span></span><br><span class="line">    pie1.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">True</span>, position=<span class="string">"inside"</span>, font_size=<span class="number">12</span>,formatter=<span class="string">"&#123;b&#125;:&#123;c&#125;"</span>, font_style=<span class="string">"italic"</span>,font_weight=<span class="string">"bold"</span>, font_family=<span class="string">"Microsoft YaHei"</span>),)</span><br><span class="line">    <span class="comment"># 生成html文档</span></span><br><span class="line">    pie1.render(final_path)</span><br></pre></td></tr></table></figure>
<p>主程序调用函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    file = pd.read_csv(<span class="string">'./comments.csv'</span>)</span><br><span class="line">    color_series = [<span class="string">'#C9DA36'</span>,<span class="string">'#9ECB3C'</span>,<span class="string">'#6DBC49'</span>,</span><br><span class="line">                        <span class="string">'#37B44E'</span>,<span class="string">'#3DBA78'</span>,<span class="string">'#14ADCF'</span>,<span class="string">'#209AC9'</span>,<span class="string">'#1E91CA'</span>,</span><br><span class="line">                        <span class="string">'#2C6BA0'</span>,<span class="string">'#2B55A1'</span>,<span class="string">'#2D3D8E'</span>,<span class="string">'#44388E'</span>,<span class="string">'#6A368B'</span>,</span><br><span class="line">                        <span class="string">'#7D3990'</span>,<span class="string">'#A63F98'</span>,<span class="string">'#C31C88'</span>,<span class="string">'#D52178'</span>,<span class="string">'#D5225B'</span>,</span><br><span class="line">                        <span class="string">'#D02C2A'</span>,<span class="string">'#D44C2D'</span>,<span class="string">'#F57A34'</span>,<span class="string">'#FA8F2F'</span>,<span class="string">'#D99D21'</span>,</span><br><span class="line">                        <span class="string">'#CF7B25'</span>,<span class="string">'#CF7B25'</span>,<span class="string">'#CF7B25'</span>]</span><br><span class="line">    get_comments(path = <span class="string">'./video_comments'</span>)</span><br><span class="line">    split_words(file = file ,result_file_path = <span class="string">'./results1.csv'</span>)</span><br><span class="line">    draw_word_cloud(raw_file_path = <span class="string">'./results1.csv'</span>,raw_image_path = <span class="string">'./unlogo.jpg'</span>,font_path_= <span class="string">'./Deng.ttf'</span>,save_image_path = <span class="string">'wordcloud2.png'</span>)</span><br><span class="line">    </span><br><span class="line">    noun_list = pick_top10_noun(raw_file_path = <span class="string">'./results1.csv'</span>)</span><br><span class="line">    draw_ndge_plot(word_list = noun_list,color_series = color_series,final_path = <span class="string">'./figures/test2.html'</span>)</span><br></pre></td></tr></table></figure>
<p>词云绘制结果如下。<br><img src="https://i.loli.net/2020/05/30/njce8LlwYpdMCZv.png" alt="wordcloud2.png"></p>
<p>下面是南丁格尔玫瑰图的展示。其展现了评论出现次数最高的10个名词。</p>
<html><head>
    <meta charset="UTF-8">
    <title>Awesome-pyecharts</title>
  <meta name="generator" content="hexo-theme-yilia-plus">
            <script type="text/javascript" src="https://assets.pyecharts.org/assets/echarts.min.js"></script>
        <script type="text/javascript" src="https://assets.pyecharts.org/assets/themes/westeros.js"></script>

<link rel="alternate" href="/atom.xml" title="Aurora Song" type="application/atom+xml">
</head>
<body>
    <div id="1800ef3832aa42f5990496eb6d041184" class="chart-container" style="width: 700px; height: 700px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;" _echarts_instance_="ec_1590812655099"><div style="position: relative; overflow: hidden; width: 700px; height: 700px; padding: 0px; margin: 0px; border-width: 0px; cursor: default;"><canvas data-zr-dom-id="zr_0" width="875" height="875" style="position: absolute; left: 0px; top: 0px; width: 700px; height: 700px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;"></canvas></div><div style="position: absolute; display: none; border-style: solid; white-space: nowrap; z-index: 9999999; transition: left 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s, top 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s; background-color: rgba(50, 50, 50, 0.7); border-width: 0px; border-color: rgb(51, 51, 51); border-radius: 4px; color: rgb(255, 255, 255); font: 14px / 21px &quot;Microsoft YaHei&quot;; padding: 5px; left: 258px; top: 200px; pointer-events: none;"><span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:#C9DA36;"></span>中国: 28,723</div></div>
    <script>
        var chart_1800ef3832aa42f5990496eb6d041184 = echarts.init(
            document.getElementById('1800ef3832aa42f5990496eb6d041184'), 'westeros', {renderer: 'canvas'});
        var option_1800ef3832aa42f5990496eb6d041184 = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "series": [
        {
            "type": "pie",
            "clockwise": true,
            "data": [
                {
                    "name": "\u4e2d\u56fd",
                    "value": 28723
                },
                {
                    "name": "\u7f8e\u56fd",
                    "value": 25589
                },
                {
                    "name": "\u6b66\u6c49",
                    "value": 19119
                },
                {
                    "name": "\u53e3\u7f69",
                    "value": 12343
                },
                {
                    "name": "\u56fd\u5bb6",
                    "value": 10781
                },
                {
                    "name": "\u75ab\u60c5",
                    "value": 9605
                },
                {
                    "name": "\u75c5\u6bd2",
                    "value": 9429
                },
                {
                    "name": "\u89c6\u9891",
                    "value": 7407
                },
                {
                    "name": "\u65e5\u672c",
                    "value": 6788
                },
                {
                    "name": "\u7279\u6717\u666e",
                    "value": 4714
                }
            ],
            "radius": [
                "20%",
                "100%"
            ],
            "center": [
                "30%",
                "65%"
            ],
            "roseType": "area",
            "label": {
                "show": true,
                "position": "inside",
                "margin": 8,
                "fontSize": 12,
                "fontStyle": "italic",
                "fontWeight": "bold",
                "fontFamily": "Microsoft YaHei",
                "formatter": "{b}:{c}"
            },
            "rippleEffect": {
                "show": true,
                "brushType": "stroke",
                "scale": 2.5,
                "period": 4
            }
        }
    ],
    "legend": [
        {
            "data": [
                "\u4e2d\u56fd",
                "\u7f8e\u56fd",
                "\u6b66\u6c49",
                "\u53e3\u7f69",
                "\u56fd\u5bb6",
                "\u75ab\u60c5",
                "\u75c5\u6bd2",
                "\u89c6\u9891",
                "\u65e5\u672c",
                "\u7279\u6717\u666e"
            ],
            "selected": {},
            "show": false,
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0
    },
    "color": [
        "#C9DA36",
        "#9ECB3C",
        "#6DBC49",
        "#37B44E",
        "#3DBA78",
        "#14ADCF",
        "#209AC9",
        "#1E91CA",
        "#2C6BA0",
        "#2B55A1",
        "#2D3D8E",
        "#44388E",
        "#6A368B",
        "#7D3990",
        "#A63F98",
        "#C31C88",
        "#D52178",
        "#D5225B",
        "#D02C2A",
        "#D44C2D",
        "#F57A34",
        "#FA8F2F",
        "#D99D21",
        "#CF7B25",
        "#CF7B25",
        "#CF7B25"
    ],
    "title": [
        {
            "text": "test",
            "padding": 5,
            "itemGap": 10
        }
    ],
    "toolbox": {
        "show": true,
        "orient": "horizontal",
        "itemSize": 15,
        "itemGap": 10,
        "left": "80%",
        "feature": {
            "saveAsImage": {
                "type": "png",
                "backgroundColor": "auto",
                "connectedBackgroundColor": "#fff",
                "show": true,
                "title": "\u4fdd\u5b58\u4e3a\u56fe\u7247",
                "pixelRatio": 1
            },
            "restore": {
                "show": true,
                "title": "\u8fd8\u539f"
            },
            "dataView": {
                "show": true,
                "title": "\u6570\u636e\u89c6\u56fe",
                "readOnly": false,
                "lang": [
                    "\u6570\u636e\u89c6\u56fe",
                    "\u5173\u95ed",
                    "\u5237\u65b0"
                ],
                "backgroundColor": "#fff",
                "textareaColor": "#fff",
                "textareaBorderColor": "#333",
                "textColor": "#000",
                "buttonColor": "#c23531",
                "buttonTextColor": "#fff"
            },
            "dataZoom": {
                "show": true,
                "title": {
                    "zoom": "\u533a\u57df\u7f29\u653e",
                    "back": "\u533a\u57df\u7f29\u653e\u8fd8\u539f"
                },
                "icon": {}
            },
            "magicType": {
                "show": true,
                "type": [
                    "line",
                    "bar",
                    "stack",
                    "tiled"
                ],
                "title": {
                    "line": "\u5207\u6362\u4e3a\u6298\u7ebf\u56fe",
                    "bar": "\u5207\u6362\u4e3a\u67f1\u72b6\u56fe",
                    "stack": "\u5207\u6362\u4e3a\u5806\u53e0",
                    "tiled": "\u5207\u6362\u4e3a\u5e73\u94fa"
                },
                "icon": {}
            },
            "brush": {
                "icon": {},
                "title": {
                    "rect": "\u77e9\u5f62\u9009\u62e9",
                    "polygon": "\u5708\u9009",
                    "lineX": "\u6a2a\u5411\u9009\u62e9",
                    "lineY": "\u7eb5\u5411\u9009\u62e9",
                    "keep": "\u4fdd\u6301\u9009\u62e9",
                    "clear": "\u6e05\u9664\u9009\u62e9"
                }
            }
        }
    }
};
        chart_1800ef3832aa42f5990496eb6d041184.setOption(option_1800ef3832aa42f5990496eb6d041184);
    </script>


</body></html>

<p>至此词频分析及初阶情感分析告一段落。还需进行更深入的情感分析。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>520</title>
    <url>/2020/05/20/520xixixi/</url>
    <content><![CDATA[<h1 id="520啦"><a href="#520啦" class="headerlink" title="520啦"></a>520啦</h1><iframe name="music" src="https://www.epidemicsound.com/track/uUfcfLBI8d
" marginwidth="1px" marginheight="10px" width="100%" height="300px" frameborder="1" 　scrolling="yes">
</iframe>



<p>记录宝宝的一段话：<br>我真的好喜欢你的温柔呜呜。记得寒假辅导员让我们写上学期的期末总结，我在里面写道：“谢谢南大让我遇到了一群温暖的人。”在写那个的时候，不知道为什么，我第一反应是想到了你。总之，在和你一天一天的相处中，我越来越感觉到你的可爱。可爱，就是值得被爱的意思，就是…越来越喜欢你的意思！真的真的好喜欢小涵。我太期待和你在夏末秋初的仙林的见面啦！</p>
<p>永远珍惜！</p>
]]></content>
      <categories>
        <category>小朋友和我</category>
      </categories>
      <tags>
        <tag>yxx&amp;sxh</tag>
      </tags>
  </entry>
  <entry>
    <title>python_project(1)</title>
    <url>/2020/05/20/python-project-1/</url>
    <content><![CDATA[<h1 id="python大作业"><a href="#python大作业" class="headerlink" title="python大作业"></a>python大作业</h1><h2 id="新冠肺炎相关B站视频爬取及评论分析"><a href="#新冠肺炎相关B站视频爬取及评论分析" class="headerlink" title="新冠肺炎相关B站视频爬取及评论分析"></a>新冠肺炎相关B站视频爬取及评论分析</h2><h3 id="PART-Ⅰ"><a href="#PART-Ⅰ" class="headerlink" title="PART Ⅰ"></a>PART Ⅰ</h3><a id="more"></a>
<h4 id="爬取新冠肺炎相关视频信息"><a href="#爬取新冠肺炎相关视频信息" class="headerlink" title="爬取新冠肺炎相关视频信息"></a>爬取新冠肺炎相关视频信息</h4><p>python大作业，我们小组计划搜集新冠肺炎相关BiliBili视频的评论，并针对评论进行中文语义情感分析、词频分析等基础分析。</p>
<p>为了完成这项工作，我们首先需要爬取新冠肺炎相关的视频信息，包括视频标题、视频链接。</p>
<p>首先进入搜索页面，键入“新冠肺炎”。为了减小后续工作量，我们在网页中直接勾选“最多点击”，使结果按照点击量排序。得到搜索结果如下图：</p>
<p><img src="https://i.loli.net/2020/05/20/ECGm875vOazdIxZ.png" alt="M_`5_WS_4DL_88V_QGW6K`N.png"></p>
<p>观察网站源代码，可见红色方框内的代码包含了我们所需要的视频标题与视频链接的信息。<br><img src="https://i.loli.net/2020/05/20/e7duBP1ShUM9mpy.png" alt="RZQVTH_45__C158@UIB_9_7.png"></p>
<p>有了这些条件，就可以开始进行爬取了。</p>
<h5 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h5><p>首先载入爬取所需要的包。因为B站有一定的反爬措施，所以需要<code>fake_useragent</code>来提供多个请求头信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> get</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br></pre></td></tr></table></figure>
<h5 id="爬取"><a href="#爬取" class="headerlink" title="爬取"></a>爬取</h5><p>因为搜索结果不止一页，因此定义函数<code>get_url_list</code>来获取每一页的url，并返回为一个列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url_list</span><span class="params">(page)</span>:</span></span><br><span class="line">    <span class="comment">#page = int(input('输入页码：'))</span></span><br><span class="line">    url_list = []</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= page:</span><br><span class="line">        url = <span class="string">"https://search.bilibili.com/video?keyword=%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E&amp;order=click&amp;duration=0&amp;tids_1=0&amp;page="</span> + str(j)</span><br><span class="line">        url_list.append(url)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> url_list</span><br></pre></td></tr></table></figure>
<p>获取了所有url的列表后，定义函数<code>open_url</code>和<code>get_Video</code>对网页进行爬取，并用<code>lxml</code>包对网页进行解析，获得所需视频信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    ua = UserAgent()</span><br><span class="line">    random_header = ua.chrome</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: random_header</span><br><span class="line">        &#125;</span><br><span class="line">    res = get(url, headers = headers)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_Video</span><span class="params">(res)</span>:</span></span><br><span class="line">    html = etree.HTML(res.text)</span><br><span class="line">    name = html.xpath(<span class="string">'//*[@class="video-item matrix"]/a/@title'</span>)</span><br><span class="line">    href = html.xpath(<span class="string">'//*[@class="video-item matrix"]/a/@href'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(href)):</span><br><span class="line">        href[i]=<span class="string">'https:'</span> + href[i]</span><br><span class="line">    <span class="keyword">return</span> name, href</span><br></pre></td></tr></table></figure>

<h5 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h5><p>最后定义<code>main()</code>主函数，调用上述函数进行爬取，并将结果写入csv文件中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    page = int(input(<span class="string">'输入页码：'</span>))</span><br><span class="line">    <span class="comment">#url = 'https://search.bilibili.com/video?keyword=%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E&amp;order=click&amp;duration=0&amp;tids_1=0&amp;page=&#123;&#125;'.format(str(j))</span></span><br><span class="line">    url_list = get_url_list(page)     </span><br><span class="line">    name_list = []</span><br><span class="line">    href_list = []</span><br><span class="line">    <span class="keyword">for</span> urls <span class="keyword">in</span> url_list:</span><br><span class="line">        res = open_url(urls)</span><br><span class="line">        name, href = get_Video(res)</span><br><span class="line">        name_list.extend(name)</span><br><span class="line">        href_list.extend(href)</span><br><span class="line">    video_info_df = pd.DataFrame(&#123;<span class="string">'name'</span>:name_list, <span class="string">'href'</span>:href_list&#125;)</span><br><span class="line">    video_info_df.to_csv(<span class="string">'./video_info.csv'</span>,encoding = <span class="string">'utf_8_sig'</span>,index = <span class="number">0</span>)    <span class="comment">#写入csv文件,不保留行索引</span></span><br></pre></td></tr></table></figure>
<p>最后，调用主函数，爬取完成。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h5 id="将bv号转换为av号"><a href="#将bv号转换为av号" class="headerlink" title="将bv号转换为av号"></a>将bv号转换为av号</h5><p>为了减轻工作量，我们采用调用B站API的形式爬取视频评论，而API中oid部分对应的是视频的av编号，而爬取的视频链接中呈现的是bv编号，因此，需要对其进行转换。<br>参考了教程：<a href="https://www.bilibili.com/video/BV1R7411y7kw" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1R7411y7kw</a><br>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bv_to_av</span><span class="params">(bv_num)</span>:</span></span><br><span class="line">    BvNo1 = bv_num[<span class="number">0</span>][<span class="number">2</span>:]</span><br><span class="line">    <span class="comment">#print(BvNo1)</span></span><br><span class="line">    keys = &#123;</span><br><span class="line">        <span class="string">'1'</span>:<span class="string">'13'</span>, <span class="string">'2'</span>:<span class="string">'12'</span>, <span class="string">'3'</span>:<span class="string">'46'</span>, <span class="string">'4'</span>:<span class="string">'31'</span>, <span class="string">'5'</span>:<span class="string">'43'</span>, <span class="string">'6'</span>:<span class="string">'18'</span>, <span class="string">'7'</span>:<span class="string">'40'</span>, <span class="string">'8'</span>:<span class="string">'28'</span>, <span class="string">'9'</span>:<span class="string">'5'</span>,</span><br><span class="line">        <span class="string">'A'</span>:<span class="string">'54'</span>, <span class="string">'B'</span>:<span class="string">'20'</span>, <span class="string">'C'</span>:<span class="string">'15'</span>, <span class="string">'D'</span>:<span class="string">'8'</span>, <span class="string">'E'</span>:<span class="string">'39'</span>, <span class="string">'F'</span>:<span class="string">'57'</span>, <span class="string">'G'</span>:<span class="string">'45'</span>, <span class="string">'H'</span>:<span class="string">'36'</span>, <span class="string">'J'</span>:<span class="string">'38'</span>, <span class="string">'K'</span>:<span class="string">'51'</span>, <span class="string">'L'</span>:<span class="string">'42'</span>, <span class="string">'M'</span>:<span class="string">'49'</span>, <span class="string">'N'</span>:<span class="string">'52'</span>, <span class="string">'P'</span>:<span class="string">'53'</span>, <span class="string">'Q'</span>:<span class="string">'7'</span>, <span class="string">'R'</span>:<span class="string">'4'</span>, <span class="string">'S'</span>:<span class="string">'9'</span>, <span class="string">'T'</span>:<span class="string">'50'</span>, <span class="string">'U'</span>:<span class="string">'10'</span>, <span class="string">'V'</span>:<span class="string">'44'</span>, <span class="string">'W'</span>:<span class="string">'34'</span>, <span class="string">'X'</span>:<span class="string">'6'</span>, <span class="string">'Y'</span>:<span class="string">'25'</span>, <span class="string">'Z'</span>:<span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'a'</span>: <span class="string">'26'</span>, <span class="string">'b'</span>: <span class="string">'29'</span>, <span class="string">'c'</span>: <span class="string">'56'</span>, <span class="string">'d'</span>: <span class="string">'3'</span>, <span class="string">'e'</span>: <span class="string">'24'</span>, <span class="string">'f'</span>: <span class="string">'0'</span>, <span class="string">'g'</span>: <span class="string">'47'</span>, <span class="string">'h'</span>: <span class="string">'27'</span>, <span class="string">'i'</span>: <span class="string">'22'</span>, <span class="string">'j'</span>: <span class="string">'41'</span>, <span class="string">'k'</span>: <span class="string">'16'</span>, <span class="string">'m'</span>: <span class="string">'11'</span>, <span class="string">'n'</span>: <span class="string">'37'</span>, <span class="string">'o'</span>: <span class="string">'2'</span>,</span><br><span class="line">        <span class="string">'p'</span>: <span class="string">'35'</span>, <span class="string">'q'</span>: <span class="string">'21'</span>, <span class="string">'r'</span>: <span class="string">'17'</span>, <span class="string">'s'</span>: <span class="string">'33'</span>, <span class="string">'t'</span>: <span class="string">'30'</span>, <span class="string">'u'</span>: <span class="string">'48'</span>, <span class="string">'v'</span>: <span class="string">'23'</span>, <span class="string">'w'</span>: <span class="string">'55'</span>, <span class="string">'x'</span>: <span class="string">'32'</span>, <span class="string">'y'</span>: <span class="string">'14'</span>,<span class="string">'z'</span>:<span class="string">'19'</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 2. 将key对应的value存入一个列表</span></span><br><span class="line">    BvNo2 = []</span><br><span class="line">    <span class="keyword">for</span> index, ch <span class="keyword">in</span> enumerate(BvNo1):</span><br><span class="line">        BvNo2.append(int(str(keys[ch])))</span><br><span class="line">    <span class="comment"># 3. 对列表中不同位置的数进行*58的x次方的操作</span></span><br><span class="line">    BvNo2[<span class="number">0</span>] = int(BvNo2[<span class="number">0</span>] * math.pow(<span class="number">58</span>, <span class="number">6</span>));</span><br><span class="line">    BvNo2[<span class="number">1</span>] = int(BvNo2[<span class="number">1</span>] * math.pow(<span class="number">58</span>, <span class="number">2</span>));</span><br><span class="line">    BvNo2[<span class="number">2</span>] = int(BvNo2[<span class="number">2</span>] * math.pow(<span class="number">58</span>, <span class="number">4</span>));</span><br><span class="line">    BvNo2[<span class="number">3</span>] = int(BvNo2[<span class="number">3</span>] * math.pow(<span class="number">58</span>, <span class="number">8</span>));</span><br><span class="line">    BvNo2[<span class="number">4</span>] = int(BvNo2[<span class="number">4</span>] * math.pow(<span class="number">58</span>, <span class="number">5</span>));</span><br><span class="line">    BvNo2[<span class="number">5</span>] = int(BvNo2[<span class="number">5</span>] * math.pow(<span class="number">58</span>, <span class="number">9</span>));</span><br><span class="line">    BvNo2[<span class="number">6</span>] = int(BvNo2[<span class="number">6</span>] * math.pow(<span class="number">58</span>, <span class="number">3</span>));</span><br><span class="line">    BvNo2[<span class="number">7</span>] = int(BvNo2[<span class="number">7</span>] * math.pow(<span class="number">58</span>, <span class="number">7</span>));</span><br><span class="line">    BvNo2[<span class="number">8</span>] = int(BvNo2[<span class="number">8</span>] * math.pow(<span class="number">58</span>, <span class="number">1</span>));</span><br><span class="line">    BvNo2[<span class="number">9</span>] = int(BvNo2[<span class="number">9</span>] * math.pow(<span class="number">58</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="comment"># 4.求出这10个数的合</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> BvNo2:</span><br><span class="line">        sum += i</span><br><span class="line">    <span class="comment"># 5. 将和减去100618342136696320</span></span><br><span class="line">    sum -= <span class="number">100618342136696320</span></span><br><span class="line">    <span class="comment"># 6. 将sum 与177451812进行异或</span></span><br><span class="line">    temp = <span class="number">177451812</span></span><br><span class="line">    av = sum ^ temp</span><br><span class="line">    <span class="keyword">return</span> av</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    file = pd.read_csv(<span class="string">'video_info.csv'</span>)</span><br><span class="line">    video_info_df = pd.DataFrame(file)</span><br><span class="line"></span><br><span class="line">    av_list = [] </span><br><span class="line">    <span class="keyword">for</span> urls <span class="keyword">in</span> video_info_df[<span class="string">'href'</span>]:</span><br><span class="line">        bv = re.compile(<span class="string">'(BV.*)\?'</span>)</span><br><span class="line">        bv_num = bv.findall(urls)</span><br><span class="line">        av = bv_to_av(bv_num)</span><br><span class="line">        av_list.append(str(av))</span><br><span class="line">    <span class="comment">#print(av_list)</span></span><br><span class="line">    video_info_df[<span class="string">'av_oid'</span>] = av_list</span><br><span class="line">    video_info_df.to_csv(<span class="string">"./video_info.csv"</span>,encoding = <span class="string">'utf_8_sig'</span>,index = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>剩余任务还有，视频评论的爬取，评论词频分析、中文语义分析。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Summary of the WIKI of 2017-CPU-iGEM-Team</title>
    <url>/2020/04/09/Summary-of-the-WIKI-of-2017-CPU-iGEM-Team/</url>
    <content><![CDATA[<p>对中国药科大学2017年的iGEM项目进行介绍，这是<a href="http://2017.igem.org/Team:CPU_CHINA" target="_blank" rel="noopener">团队Wiki链接</a>。</p>
<a id="more"></a>

<h1 id="人类工程化的抗自身免疫疾病调节性T细胞系统"><a href="#人类工程化的抗自身免疫疾病调节性T细胞系统" class="headerlink" title="人类工程化的抗自身免疫疾病调节性T细胞系统"></a>人类工程化的抗自身免疫疾病调节性T细胞系统</h1><hr>
<h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p><strong>类风湿 免疫抑制与平衡 嵌合抗原受体改造</strong></p>
<hr>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>类风湿性关节炎伴随着局部免疫失衡，表现在Th17细胞过度活跃，IL6、IL17等促炎因子分泌提升，但Treg等抑炎细胞功能被抑制。</p>
<p>CPU的团队设计了一个<strong>SynNotch</strong>系统，该系统包含修饰的Notch蛋白使得该蛋白能够在存在<strong>IL17A</strong>的炎症条件下<strong>特异性激活USP7的基因表达</strong>。USP7蛋白可以导致FOXP3蛋白去泛素化，从而通过保护FOXP3<strong>免受泛素化降解</strong>来增强FOXP3蛋白在炎症环境中的稳定性。因此，Treg细胞可以维持其免疫抑制功能。同时，我们设计了一个CAR系统，该系统可使Treg细胞靶向<strong>CD20 + B淋巴细胞</strong>，从而专门发挥免疫抑制功能，从而发挥抗炎作用。</p>
<hr>
<h2 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h2><p>SynNotch接收来自Th17细胞分泌的IL17-A，剪切下Gal4-vp64复合体，Gal4-vp64进入细胞核促进USP7的转录，USP7保护FOXP3不被泛素化降解。同时CAR系统识别CD20+ B淋巴细胞（依靠B淋巴细胞<strong>特异性表达CD20</strong>)，通过常规的共刺激序列4-1BB增强Treg功能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">酵母Gal4-UAS系统：Gal4蛋白可以特异性识别其基因组中的UAS序列。</span><br><span class="line"></span><br><span class="line">人工转录因子vp64:vp64是一种反式作用因子。在本项目中被连接在Gal4蛋白上，当Gal4蛋白与UAS序列结合后，vp64能促进跟</span><br><span class="line">的在UAS序列之后的USP7的转录。</span><br><span class="line"></span><br><span class="line">Notch系统：Notch蛋白是跨膜蛋白，可分为三个结构域：细胞外结构域，跨膜结构域和细胞内结构域。在其细胞内结构域内有一</span><br><span class="line">个切割位点，Notch蛋白将在刺激下被切割，从膜上释放其C端肽与下游蛋白结合并进行信号转导。</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/04/09/CZQFdXoWKqUJah9.png" alt="示意图1"></p>
<p><img src="https://i.loli.net/2020/04/10/QxHMbCBotukg91V.png" alt="示意图2"></p>
<hr>
<h2 id="质粒载体系统"><a href="#质粒载体系统" class="headerlink" title="质粒载体系统"></a>质粒载体系统</h2><h3 id="SynNotch"><a href="#SynNotch" class="headerlink" title="SynNotch"></a><a href="http://parts.igem.org/Part:BBa_K2506001" target="_blank" rel="noopener">SynNotch</a></h3><p>SynNotch是一种能够在炎症环境中<strong>特异性激活USP7基因</strong>的表达，从而通过稳定FOXP3蛋白来维持Treg细胞的活性的系统。其构建的质粒载体大小为10699bp。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IL17RA:IL17的受体，能够特异性识别IL17；</span><br><span class="line"></span><br><span class="line">Notch1：Notch蛋白核心区，包括重复序列，异二聚化结构域和跨膜结构域。其在接受信号（本项目中为IL17)后被激活，对胞内末</span><br><span class="line">端蛋白序列进行切割；</span><br><span class="line"></span><br><span class="line">Gal4-vp64:如前所述。</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/04/09/riD2jtGZzV4N3X6.png" alt="质粒图谱1"></p>
<h3 id="UUpromU"><a href="#UUpromU" class="headerlink" title="UUpromU"></a><a href="http://parts.igem.org/Part:BBa_K2506004" target="_blank" rel="noopener">UUpromU</a></h3><p>UUpromU是专门为SynNotch系统能特异性表达目标基因设计的系统。</p>
<h4 id="pcDNA-3-1"><a href="#pcDNA-3-1" class="headerlink" title="pcDNA 3.1(+)"></a>pcDNA 3.1(+)</h4><p>全长7005bp。携带两个UAS序列、USP7的启动子序列及USP7基因序列。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实际上该团队是将UUpromU序列放入pcDNA 3.1(+)质粒中的。</span><br><span class="line"></span><br><span class="line">UAS序列：与前述vp64结合，促进USP7的高表达；</span><br><span class="line"></span><br><span class="line">USP7：保护FOXP3不被泛素化降解，从而保证Treg细胞的抑制炎症的作用。</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/04/09/oOCJr1vHblnscRW.png" alt="质粒图谱2"></p>
<h3 id="CAR-Treg"><a href="#CAR-Treg" class="headerlink" title="CAR-Treg"></a><a href="http://parts.igem.org/Part:BBa_K2506002" target="_blank" rel="noopener">CAR-Treg</a></h3><p>CAR-CD20是使工程改造的T细胞能够特异性识别B淋巴细胞中的表面抗原CD20从而加强其抗炎功能的模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CD20-ScFv：CD20蛋白的单链抗体。由CD20单克隆抗体的可变区序列构建。用于准确识别并结合B淋巴细胞表面抗原CD20；</span><br><span class="line"></span><br><span class="line">C-Myc tag：与目的蛋白一起表达地蛋白标签，便于目的蛋白的表达、检测、示踪和纯化等；</span><br><span class="line"></span><br><span class="line">4-1BB：共刺激信号；</span><br><span class="line"></span><br><span class="line">CD3Z:刺激信号。与4-1BB一起促进信号的高水平传递，从而更强地激活Treg细胞；</span><br><span class="line"></span><br><span class="line">mCherry：荧光蛋白，便于基因表达的检测。</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/04/09/Dm3hWCpwzAyJObK.png" alt="质粒图谱3"></p>
<p><em>注：该项目组采用慢病毒和电转两种方式传递质粒，其实我没有很理解。电转质粒对细胞损伤大且入核率低，如何控制两种方式转染的细胞在相同环境下的目的基因表达量相似是一个值得思索的问题。</em></p>
<hr>
<h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ul>
<li>考虑改造T细胞的生存期问题</li>
<li>考虑部分电转Treg细胞的转染效率问题</li>
<li>类风湿关节炎病人Th17浓度升高是广泛的，其血清Th17浓度也升高了，考虑到这点，如何限定该团队设计的Treg细胞的作用范围就值得思索了。如果在全身触发较大规模的免疫抑制效应，其后果将是可怕的。</li>
</ul>
<hr>
<h2 id="可借鉴之处"><a href="#可借鉴之处" class="headerlink" title="可借鉴之处"></a>可借鉴之处</h2><p>emmm似乎在实验设计和元件设计上没有什么值得借鉴的，他们的元件设计较为简单，没有复杂的逻辑电路，CMV启动子等也是比较常见的。还有一点让我奇怪的是他们的参考文献里由Tet-on系统但是他们的元件设计里没有体现，有点奇怪。</p>
<p>但是值得我们提起注意的是，我们要选择合适的靶点进行设计，同时选择合适的刺激因素，兼顾表达量与特异性。同时应当使用各种手段控制元件的作用范围。</p>
]]></content>
      <categories>
        <category>iGEM</category>
      </categories>
      <tags>
        <tag>Project Review</tag>
      </tags>
  </entry>
  <entry>
    <title>Tet-on System</title>
    <url>/2020/04/02/Tet-on-System/</url>
    <content><![CDATA[<h1 id="Tet-on诱导表达系统的介绍"><a href="#Tet-on诱导表达系统的介绍" class="headerlink" title="Tet-on诱导表达系统的介绍"></a>Tet-on诱导表达系统的介绍</h1><a id="more"></a>
<h2 id="Tet-on-四环素诱导表达系统"><a href="#Tet-on-四环素诱导表达系统" class="headerlink" title="Tet-on 四环素诱导表达系统"></a>Tet-on 四环素诱导表达系统</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>Tet调控表达系统通过诱导药物（如Tet）改变调控蛋白的构象，从而达到调控目标蛋白表达的目的。</p>
<p>最初的Tet调控基因表达系统是以大肠杆菌Tn10转座子上Tet抗性操纵子为基础而建立的。Tet阻遏蛋白（Tet repressor protein, TetR）与Tet操纵子（Tet operator, TetO）能够特异性结合。当细胞内无Tet存在时，Tet会与TetO结合，从而阻断下游抗性基因表达；当有Tet存在时，Tet使TetR构象发生改变，导致TetR与TetO分离，使下游抗性基因得以表达，细菌从而获得耐药性。<br><img src="https://i.loli.net/2020/04/02/2r3b9Qky5NlGF7H.png" alt="原理图"></p>
<h3 id="Tet-on-调控系统"><a href="#Tet-on-调控系统" class="headerlink" title="Tet-on 调控系统"></a>Tet-on 调控系统</h3><p>利用TetR和TetO特异性结合的特点，多种类型的Tet调控系统逐渐发展起来。根据应用广泛的是Tet-on激活型系统。</p>
<p>Tet-on系统由调节表达载体和反应表达载体组成。</p>
<p>调节表达载体包含一个人巨细胞病毒早期启动子（PhCMV）和反义Tet转录活化因子（reverse tetracycline transcriptional activator，rtTA）。其中rtTA由反义TetR（reverse TetR, rTetR）和单纯疱疹病毒（HSV）VP16蛋白C端的一段转录激活区域融合而成。</p>
<p>反应表达载体由Tet应答元件（Tet-responsive element, TRE）、最小CMV启动子（minimal CMV promoter, PminCMV）及目的基因组成。其中TRE是7个重复的TetO序列。</p>
<p>由于PminCMV缺少增强子，因此rtTA未与TRE结合时，目的基因不表达；当rtTA与TRE结合时，VP16会使PminCMV活化从而使基因表达。</p>
<p>在Dox不存在时，rTetR不能与TRE结合，导致基因表达被抑制；而当Dox存在时，rTetR能与TRE结合，进而使得目的基因表达。<br><img src="https://i.loli.net/2020/04/02/eEwQj94MLPvRWpO.png" alt="Tet-on系统原理图"></p>
<p><em>当然还有Tet-off系统，原理相似，在此不多赘述</em></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li>Molin M, Shoshan MC, Ohman-Forslund K, Linder S, Akusjärvi G. Two novel adenovirus vector systems permitting regulated protein expression in gene transfer experiments. J Virol. 1998;72(10):8358–8361.</li>
<li>Freundlieb, S., Schirra‐Müller, C. and Bujard, H. (1999), A tetracycline controlled activation/repression system with increased potential for gene transfer into mammalian cells. J. Gene Med., 1: 4-12. doi:10.1002/(SICI)1521-2254(199901/02)1:1&lt;4::AID-JGM4&gt;3.0.CO;2-Y</li>
<li><a href="http://2013.igem.org/Team:Bielefeld_Germany/Biosafety/Biosafety_System_M" target="_blank" rel="noopener">http://2013.igem.org/Team:Bielefeld_Germany/Biosafety/Biosafety_System_M</a></li>
<li><a href="http://2013.igem.org/Team:SYSU-China/Project/Design" target="_blank" rel="noopener">http://2013.igem.org/Team:SYSU-China/Project/Design</a></li>
</ol>
]]></content>
      <categories>
        <category>iGEM</category>
      </categories>
      <tags>
        <tag>Gene Transport</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to some lentiviral vectors</title>
    <url>/2020/04/02/Introduction-to-some-lentiviral-vectors/</url>
    <content><![CDATA[<p>两家公司的四环素诱导目的基因表达的慢病毒载体的介绍</p>
<a id="more"></a>
<h2 id="ViraPower™-HiPerform™-T‑REx™-Gateway™-Expression-System"><a href="#ViraPower™-HiPerform™-T‑REx™-Gateway™-Expression-System" class="headerlink" title="ViraPower™ HiPerform™ T‑REx™ Gateway™ Expression System"></a>ViraPower™ HiPerform™ T‑REx™ Gateway™ Expression System</h2><p><a href="https://www.thermofisher.com/order/catalog/product/A11141?SID=srch-srp-A11141#/A11141?SID=srch-srp-A11141" target="_blank" rel="noopener">产品网页链接看这里。</a><br>ViraPower™HiPerform™T-REx™Gateway®表达系统包括生成慢病毒所需的所有组件，包括载体试剂盒，293FT细胞系和支持试剂盒。它是一种五质粒慢病毒载体，能够在分裂或非分裂细胞系中构建稳定的<strong>四环素诱导</strong>的目标基因表达体系。</p>
<h3 id="主要特征"><a href="#主要特征" class="headerlink" title="主要特征"></a>主要特征</h3><ul>
<li>利用土拨鼠肝炎病毒的WPRE元件（土拨鼠转录后调控元件），增加了HIV-1整合酶基因的转基因表达和cPPT（中央多嘌呤区），增加了整合入宿主基因组的慢病毒的拷贝数，从而提高了病毒滴度。</li>
<li>由人巨细胞病毒（CMV）启动子和两个四环素操纵子（TetO2）组成的杂合启动子能够使得目的基因大量、稳定表达</li>
<li>采用弹性蛋白标记</li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>产生无复制能力的慢病毒，用于转染分裂和非分裂的哺乳动物细胞</li>
<li>使用Gateway®技术轻松进行基于基因重组的克隆</li>
<li>形成稳定的，长期的，通过四环素调节的基因表达</li>
<li>与传统的慢病毒表达系统相比，能产生更高的蛋白表达水平。</li>
</ul>
<h3 id="两个重要质粒"><a href="#两个重要质粒" class="headerlink" title="两个重要质粒"></a>两个重要质粒</h3><h4 id="pLenti6-3-TO-V5-DEST™"><a href="#pLenti6-3-TO-V5-DEST™" class="headerlink" title="pLenti6.3/TO/V5-DEST™"></a>pLenti6.3/TO/V5-DEST™</h4><p>该目的载体使用T‑REx™技术来进行四环素调节的目的基因表达。包括用于将表达构建体包装到病毒体中的元件，用于选择稳定转导的细胞系的杀稻瘟素抗性标记，同时利用HiperForm技术来增加病毒滴度和转基因表达。<br><img src="https://i.loli.net/2020/04/02/67xiqy1K4O53BAk.png" alt="pLenti6.3/TO/V5-DEST™载质粒"></p>
<h4 id="pLenti3-3-TR"><a href="#pLenti3-3-TR" class="headerlink" title="pLenti3.3/TR"></a>pLenti3.3/TR</h4><p>该阻遏质粒利用HiPerform™技术在CMV启动子的控制下组成型表达高水平的四环素（Tet）阻遏物；包括用于病毒包装的元件，用于选择稳定转导的细胞系的新霉素抗性标记。<br><img src="https://i.loli.net/2020/04/02/bE9I7UJl1SuZLht.png" alt="pLenti3.3/TR质粒"></p>
<h2 id="吉凯基因-TetIIP-Puromycin-表达系统"><a href="#吉凯基因-TetIIP-Puromycin-表达系统" class="headerlink" title="吉凯基因 TetIIP Puromycin 表达系统"></a>吉凯基因 TetIIP Puromycin 表达系统</h2><p><a href="http://www.taogene.com/emkt.htm#/PcMerchandises?id=%40%5B256%5D.%5B254%5D%230&categoryId=20" target="_blank" rel="noopener">产品链接看这里。</a><br>吉凯 Tet on 可诱导基因表达慢病毒产品感染目的细胞，可在目的细胞中获得可灵敏调控的目的基因表达，在细胞培养基中不含Dox（doxycycline，多西环素）时，目的基因本底表达量极低，加入Dox 后，目的基因诱导表达量极高。客户还可用此慢病毒产品感染目的细胞后，经过筛选获得可诱导表达的稳定细胞株。</p>
<p>诱导原理为：rtTA 是从大肠杆菌中改造得来的反式作用因子，其在 Dox 存在的情况下能够与正式作用元件 TRE（tetracycline response element）结合，进而促进下游基因转录，目的基因表达；而在不含 Dox 的情况下，trTA 从 TRE 上脱离，基因停止转录，目的基因停止表达</p>
<p>吉凯基因采用的是第三代的慢病毒载体系统。将目的基因插入过表达慢病毒载体后，通过包装获得的病毒颗粒成为过表达慢病毒产品，<strong>但该病毒仍然具有可能的潜在的生物学危险</strong>。吉凯基因建议不要使用编码已知或可能会致癌的基因的假型病毒。除非已经完全公认某个基因肯定没有致癌性，否则均不建议采用假型病毒进行生物学实验。</p>
<h3 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h3><ul>
<li>严格调控</li>
<li>反应迅速</li>
<li>蛋白表达量与加入诱导剂的浓度正相关，表达量可调控</li>
<li>特异性强，无副诱导</li>
<li>诱导剂容易获得且诱导浓度低</li>
</ul>
<h3 id="CV051载体质粒图谱"><a href="#CV051载体质粒图谱" class="headerlink" title="CV051载体质粒图谱"></a>CV051载体质粒图谱</h3><p><img src="https://i.loli.net/2020/04/02/iBW1VsULJnPdtv4.jpg" alt="载体质粒图谱"></p>
]]></content>
      <categories>
        <category>iGEM</category>
      </categories>
      <tags>
        <tag>Gene Transport</tag>
      </tags>
  </entry>
  <entry>
    <title>Movie Time!</title>
    <url>/2020/03/21/Movie-Time/</url>
    <content><![CDATA[<p>今天<strong>第一次</strong>和小朋友看了电影！电影名字是 <strong><em>Level 16</em></strong>。嘤电影有点吓人，但是小朋友超级好的！我被吓到的时候疯狂安慰我<del>有点不好意思的说哈哈哈一个男生吓成那样呜</del>。但还是很开心呀，只不过下次一定要换喜剧片哼。</p>
]]></content>
      <categories>
        <category>小朋友和我</category>
      </categories>
      <tags>
        <tag>yxx&amp;sxh</tag>
      </tags>
  </entry>
  <entry>
    <title>Lentivirus</title>
    <url>/2020/03/21/Lentivirus/</url>
    <content><![CDATA[<p>iGEM比赛我方队伍所需慢病毒基础知识</p>
<a id="more"></a>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="慢病毒载体系统"><a href="#慢病毒载体系统" class="headerlink" title="慢病毒载体系统"></a>慢病毒载体系统</h2><p>慢病毒载体系统是一种能非常高效的把外源基因稳定整合到哺乳动物细胞中的载体工具。除了常规质粒转染外，目前该系统也是把外源基因转入哺乳动物细胞的最常用方法之一。由于具有目的基因和启动子选择的灵活性以及转染细胞类型的广泛性两大特点，使得慢病毒载体系统成为倍受欢迎的外源基因表达系统。</p>
<p>慢病毒载体来源于人类免疫缺陷病毒HIV，属于逆转录病毒家族。野生型慢病毒基因组是由线性双正链RNA构成的。</p>
<p>慢病毒重组载体构建完成后与辅助质粒一起转染进入包装细胞。在包装细胞中，位于两个长末端重复序列（LTR）之间的DNA片段会被转录成RNA，由辅助质粒表达的病毒蛋白将其包装形成病毒颗粒。包装后的活体病毒将会被释放到上清液中，可以直接收集或进一步浓缩病毒转染靶细胞。</p>
<p>当病毒转导靶细胞时，释放到宿主细胞中的病毒RNA借助逆转录酶逆转录成双链DNA，然后随机整合进宿主细胞的基因组中。在病毒载体中，位于两个LTR的DNA片段和病毒基因组都会稳定整合到靶细胞的基因组中。</p>
<h2 id="慢病毒结构"><a href="#慢病毒结构" class="headerlink" title="慢病毒结构"></a>慢病毒结构</h2><p>病毒结构蛋白gag、pol和env。gag基因编码病毒的核心蛋白如核衣壳蛋白（p7）、内膜蛋白（p17）和衣壳蛋白（p24）；pol基因编码病毒复制相关的酶；env基因编码病毒包膜糖蛋白。</p>
<p>病毒调节蛋白rev,tat。rev主要参与蛋白调节的表达水平，tat参与蛋白转录的控制，与病毒的长末端重复序列（long terminal repeats, LTRS）结合后促进病毒的所有基因的转录。</p>
<p>四个辅助蛋白，即vif、vpr、vpu、nef，帮助病毒包装完成<br><img src="https://i.loli.net/2020/03/21/UYR6wkXyMfHFxDV.png" alt="慢病毒基因结构"></p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>源基因的稳定整合</li>
<li>滴度高</li>
<li>宿主范围广泛</li>
<li>基因拷贝数相对均一</li>
<li>安全性<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li>
<li>载体容量有限制：大概只有６－７kb的可用序列长度</li>
<li>技术比较复杂<h1 id="四质粒慢病毒载体系统"><a href="#四质粒慢病毒载体系统" class="headerlink" title="四质粒慢病毒载体系统"></a>四质粒慢病毒载体系统</h1>这是第三代慢病毒载体系统。顾名思义其包含了四个质粒序列。其可以将目标基因的<strong>cDNA</strong>序列转入靶细胞的基因组中。四质粒系统主要是：pGag/Pol、pRev、pVSV-G，此外，还有一个可以放置目的基因序列的载体。这个体系产生活性病毒的可能被大大降低。(5′端LTR被替换成了CMV，3′端LTR被换成了SV40 ployA 这两个都是可以增强表达，减低病毒对人体危害性)<br>如下是一家公司的<em>pLenti CMV GFP Hygro</em>核心质粒序列，<a href="https://www.addgene.org/17446/" target="_blank" rel="noopener">相关网址在这里</a>。<br><img src="https://i.loli.net/2020/03/21/g7iAKf1B3ljrCTP.png" alt="一个四质粒表达系统中的核心质粒（举个例子）"></li>
</ul>
<h1 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h1><p>至于我们实验中具体用要到的慢病毒载体，现在有几点是比较明确的。</p>
<ul>
<li>使用的是第三代四质粒慢病毒转染载体</li>
<li>核心质粒中整合进去的目的基因片段最好不超过6-7kb，否则会导致病毒滴度的下降</li>
<li>慢病毒一般需要BSL-2等级的实验室及相关受培训操作人员进行操作，所以我们应该只需要将质粒设计出来并验证。</li>
<li>在查阅文献时有发现肝脏特异性靶向的四环素介导的白蛋白启动子调控的慢病毒载体，<a href="http://www.cnki.com.cn/Article/CJFDTotal-DYJZ201908008.htm" target="_blank" rel="noopener">相关论文见此</a>。可供参考。</li>
</ul>
<h2 id="个人建议"><a href="#个人建议" class="headerlink" title="个人建议"></a>个人建议</h2><p>其实相对于设计质粒的工作来说，寻找合适的慢病毒载体工作非常简单。慢病毒载体的最核心部分其实是核心质粒的设计，对于四质粒转运系统来说似乎其他三个和慢病毒转染等相关的质粒差异并不是很大？虽然可以在关注慢病毒载体同时分一点心看一下脂质体载体和裸质粒，但既然我们是想做肝脏的长期给药系统的话，效率最高的似乎还是慢病毒转染。<br><del>淦 居然漏掉了第四代质粒</del></p>
]]></content>
      <categories>
        <category>iGEM</category>
      </categories>
      <tags>
        <tag>Gene Transport</tag>
      </tags>
  </entry>
  <entry>
    <title>First Step</title>
    <url>/2020/03/18/First-Step/</url>
    <content><![CDATA[<p>I love you three thousand.</p>
<a id="more"></a>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>今天突发奇想，找到了以前搭着玩儿的小博客，正好可以用来记录两个人的一点一滴哈哈哈<del>说好打造成学习博客的呢</del>。</p>
<hr>
<h2 id="嘤嘤嘤"><a href="#嘤嘤嘤" class="headerlink" title="嘤嘤嘤"></a>嘤嘤嘤</h2><p>嘛3月15号在一起之后真的好激动啊哈哈哈哈<del>等了四个多小时隔壁还一直在敲墙真的紧张死了QAQ</del>。但是真的<strong>好开心啊！</strong></p>
<h2 id="一点小小的期待"><a href="#一点小小的期待" class="headerlink" title="一点小小的期待"></a>一点小小的期待</h2><p>唔，虽然我大概率要考研，考研时候可能真的很忙，但我还是会尽量陪着你的！医学院压力大需要多陪陪的！</p>
<h2 id="最后玩儿一点小花样"><a href="#最后玩儿一点小花样" class="headerlink" title="最后玩儿一点小花样"></a>最后玩儿一点小花样</h2><p>如果用LaTeX的话可以这么玩儿哈哈哈哈</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\usepackage&#123;fontspec,txfonts,microtype,shapepar,xcolor&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">&#123;\kaishu \color&#123;red&#125; &#123;</span><br><span class="line">\heartpar&#123;yxx小朋友我真的超级喜欢你的！&#125;&#125;&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>
<h2 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h2><p>yxx小朋友！</p>
]]></content>
      <categories>
        <category>小朋友和我</category>
      </categories>
      <tags>
        <tag>yxx&amp;sxh</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello yxx</title>
    <url>/2020/03/15/Hello-yxx/</url>
    <content><![CDATA[<p><strong>我遇见你啦</strong><br>虽然现在这个博客还很单调<br>但是我会把它变得丰富多彩的！<br><del>如果有时间的话（咕咕咕）</del></p>
]]></content>
      <categories>
        <category>小朋友和我</category>
      </categories>
      <tags>
        <tag>yxx&amp;sxh</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/03/Hello-World-0/</url>
    <content><![CDATA[<h1 id="hello-world！"><a href="#hello-world！" class="headerlink" title="hello world！"></a>hello world！</h1>]]></content>
      <tags>
        <tag>小涵！</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
